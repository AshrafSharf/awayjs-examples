{"version":3,"sources":["webpack:///./src/Basic_Fire.ts"],"names":[],"mappings":"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","file":"js/Basic_Fire.js","sourcesContent":["/*\n\nCreating fire effects with particles in Away3D\n\nDemonstrates:\n\nHow to setup a particle geometry and particle animationset in order to simulate fire.\nHow to stagger particle animation instances with different animator objects running on different timers.\nHow to apply fire lighting to a floor sprite using a multipass material.\n\nCode by Rob Bateman & Liao Cheng\nrob@infiniteturtles.co.uk\nhttp://www.infiniteturtles.co.uk\nliaocheng210@126.com\n\nThis code is distributed under the MIT License\n\nCopyright (c) The Away Foundation http://www.theawayfoundation.org\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the “Software”), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\nimport {LoaderEvent, TimerEvent, Vector3D, ColorTransform, AssetLibrary, IAsset, LoaderContext, URLRequest, RequestAnimationFrame, Timer} from \"awayjs-full/lib/core\";\nimport {BitmapImage2D, Sampler2D, BlendMode, Single2DTexture, ElementsType, Graphics} from \"awayjs-full/lib/graphics\";\nimport {HoverController, Sprite, Scene, Camera, PointLight, DirectionalLight, PrimitivePlanePrefab, StaticLightPicker} from \"awayjs-full/lib/scene\";\nimport {MethodMaterial, MethodMaterialMode}\tfrom \"awayjs-full/lib/materials\";\nimport {View} from \"awayjs-full/lib/view\";\nimport {ParticleAnimationSet, ParticleAnimator, ParticleProperties, ParticlePropertiesMode, ParticleBillboardNode, ParticleScaleNode, ParticleVelocityNode, ParticleColorNode, ParticleGraphicsHelper} from \"awayjs-full/lib/renderer\";\n\nclass Basic_Fire\n{\n\tprivate static NUM_FIRES:number /*uint*/ = 10;\n\n\t//engine variables\n\tprivate scene:Scene;\n\tprivate camera:Camera;\n\tprivate view:View;\n\tprivate cameraController:HoverController;\n\n\t//material objects\n\tprivate planeMaterial:MethodMaterial;\n\tprivate particleMaterial:MethodMaterial;\n\n\t//light objects\n\tprivate directionalLight:DirectionalLight;\n\tprivate lightPicker:StaticLightPicker;\n\n\t//particle objects\n\tprivate fireAnimationSet:ParticleAnimationSet;\n\tprivate particleSprite:Sprite;\n\tprivate fireTimer:Timer;\n\n\t//scene objects\n\tprivate plane:Sprite;\n\tprivate fireObjects:Array<FireVO> = new Array<FireVO>();\n\n\t//navigation variables\n\tprivate timer:RequestAnimationFrame;\n\tprivate time:number = 0;\n\tprivate move:boolean = false;\n\tprivate lastPanAngle:number;\n\tprivate lastTiltAngle:number;\n\tprivate lastMouseX:number;\n\tprivate lastMouseY:number;\n\n\t/**\n\t * Constructor\n\t */\n\tconstructor()\n\t{\n\t\tthis.init();\n\t}\n\n\t/**\n\t * Global initialise function\n\t */\n\tprivate init():void\n\t{\n\t\tthis.initEngine();\n\t\tthis.initLights();\n\t\tthis.initMaterials();\n\t\tthis.initParticles();\n\t\tthis.initObjects();\n\t\tthis.initListeners();\n\t}\n\n\t/**\n\t * Initialise the engine\n\t */\n\tprivate initEngine():void\n\t{\n\t\tthis.scene = new Scene();\n\n\t\tthis.camera = new Camera();\n\n\t\tthis.view = new View();\n\t\t//this.view.antiAlias = 4;\n\t\tthis.view.scene = this.scene;\n\t\tthis.view.camera = this.camera;\n\n\t\t//setup controller to be used on the camera\n\t\tthis.cameraController = new HoverController(this.camera);\n\t\tthis.cameraController.distance = 1000;\n\t\tthis.cameraController.minTiltAngle = 0;\n\t\tthis.cameraController.maxTiltAngle = 90;\n\t\tthis.cameraController.panAngle = 45;\n\t\tthis.cameraController.tiltAngle = 20;\n\t}\n\n\t/**\n\t * Initialise the lights\n\t */\n\tprivate initLights():void\n\t{\n\t\tthis.directionalLight = new DirectionalLight(0, -1, 0);\n\t\tthis.directionalLight.castsShadows = false;\n\t\tthis.directionalLight.color = 0xeedddd;\n\t\tthis.directionalLight.diffuse = .5;\n\t\tthis.directionalLight.ambient = .5;\n\t\tthis.directionalLight.specular = 0;\n\t\tthis.directionalLight.ambientColor = 0x808090;\n\t\tthis.view.scene.addChild(this.directionalLight);\n\n\t\tthis.lightPicker = new StaticLightPicker([this.directionalLight]);\n\t}\n\n\t/**\n\t * Initialise the materials\n\t */\n\tprivate initMaterials():void\n\t{\n\t\tthis.planeMaterial = new MethodMaterial();\n\t\tthis.planeMaterial.mode = MethodMaterialMode.MULTI_PASS;\n\t\tthis.planeMaterial.lightPicker = this.lightPicker;\n\t\tthis.planeMaterial.style.sampler = new Sampler2D(true, true, false);\n\t\tthis.planeMaterial.specularMethod.strength = 10;\n\n\t\tthis.particleMaterial = new MethodMaterial();\n\t\tthis.particleMaterial.blendMode = BlendMode.ADD;\n\t}\n\n\t/**\n\t * Initialise the particles\n\t */\n\tprivate initParticles():void\n\t{\n\n\t\t//create the particle animation set\n\t\tthis.fireAnimationSet = new ParticleAnimationSet(true, true);\n\n\t\t//add some animations which can control the particles:\n\t\t//the global animations can be set directly, because they influence all the particles with the same factor\n\t\tthis.fireAnimationSet.addAnimation(new ParticleBillboardNode());\n\t\tthis.fireAnimationSet.addAnimation(new ParticleScaleNode(ParticlePropertiesMode.GLOBAL, false, false, 2.5, 0.5));\n\t\tthis.fireAnimationSet.addAnimation(new ParticleVelocityNode(ParticlePropertiesMode.GLOBAL, new Vector3D(0, 80, 0)));\n\t\tthis.fireAnimationSet.addAnimation(new ParticleColorNode(ParticlePropertiesMode.GLOBAL, true, true, false, false, new ColorTransform(0, 0, 0, 1, 0xFF, 0x33, 0x01), new ColorTransform(0, 0, 0, 1, 0x99)));\n\n\t\t//no need to set the local animations here, because they influence all the particle with different factors.\n\t\tthis.fireAnimationSet.addAnimation(new ParticleVelocityNode(ParticlePropertiesMode.LOCAL_STATIC));\n\n\t\t//set the initParticleFunc. It will be invoked for the local static property initialization of every particle\n\t\tthis.fireAnimationSet.initParticleFunc = this.initParticleFunc;\n\n\t\t//create the original particle geometry\n\t\tvar particle:Sprite = <Sprite> (new PrimitivePlanePrefab(null, ElementsType.TRIANGLE, 10, 10, 1, 1, false)).getNewObject();\n\n\t\t//combine them into a list\n\t\tvar graphicsSet:Array<Graphics> = new Array<Graphics>();\n\t\tfor (var i:number /*int*/ = 0; i < 500; i++)\n\t\t\tgraphicsSet.push(particle.graphics);\n\n\t\tthis.particleSprite = new Sprite(this.particleMaterial);\n\t\tParticleGraphicsHelper.generateGraphics(this.particleSprite.graphics, graphicsSet);\n\t}\n\n\t/**\n\t * Initialise the scene objects\n\t */\n\tprivate initObjects():void\n\t{\n\t\tthis.plane = <Sprite> new PrimitivePlanePrefab(this.planeMaterial, ElementsType.TRIANGLE, 1000, 1000).getNewObject();\n\t\tthis.plane.material = this.planeMaterial;\n\t\tthis.plane.graphics.scaleUV(2, 2);\n\t\tthis.plane.y = -20;\n\n\t\tthis.scene.addChild(this.plane);\n\n\t\t//create fire object sprites from geomtry and material, and apply particle animators to each\n\t\tfor (var i:number /*int*/ = 0; i < Basic_Fire.NUM_FIRES; i++) {\n\t\t\tvar particleSprite:Sprite = this.particleSprite.clone();\n\t\t\tvar animator:ParticleAnimator = new ParticleAnimator(this.fireAnimationSet);\n\t\t\tparticleSprite.animator = animator;\n\n\t\t\t//position the sprite\n\t\t\tvar degree:number = i / Basic_Fire.NUM_FIRES * Math.PI * 2;\n\t\t\tparticleSprite.x = Math.sin(degree) * 400;\n\t\t\tparticleSprite.z = Math.cos(degree) * 400;\n\t\t\tparticleSprite.y = 5;\n\n\t\t\t//create a fire object and add it to the fire object vector\n\t\t\tthis.fireObjects.push(new FireVO(particleSprite, animator));\n\t\t\tthis.view.scene.addChild(particleSprite);\n\t\t}\n\n\t\t//setup timer for triggering each particle aniamtor\n\t\tthis.fireTimer = new Timer(1000, this.fireObjects.length);\n\t\tthis.fireTimer.addEventListener(TimerEvent.TIMER, (event:TimerEvent) => this.onTimer(event));\n\t\tthis.fireTimer.start();\n\t}\n\n\t/**\n\t * Initialise the listeners\n\t */\n\tprivate initListeners():void\n\t{\n\t\twindow.onresize  = (event:UIEvent) => this.onResize(event);\n\n\t\tdocument.onmousedown = (event:MouseEvent) => this.onMouseDown(event);\n\t\tdocument.onmouseup = (event:MouseEvent) => this.onMouseUp(event);\n\t\tdocument.onmousemove = (event:MouseEvent) => this.onMouseMove(event);\n\n\t\tthis.onResize();\n\n\t\tthis.timer = new RequestAnimationFrame(this.onEnterFrame, this);\n\t\tthis.timer.start();\n\n\t\tAssetLibrary.addEventListener(LoaderEvent.LOAD_COMPLETE, (event:LoaderEvent) => this.onResourceComplete(event));\n\n\t\t//plane textures\n\t\tAssetLibrary.load(new URLRequest(\"assets/floor_diffuse.jpg\"));\n\t\tAssetLibrary.load(new URLRequest(\"assets/floor_normal.jpg\"));\n\t\tAssetLibrary.load(new URLRequest(\"assets/floor_specular.jpg\"));\n\n\t\t//particle texture\n\t\tAssetLibrary.load(new URLRequest(\"assets/blue.png\"));\n\t}\n\n\t/**\n\t * Initialiser for particle properties\n\t */\n\tprivate initParticleFunc(prop:ParticleProperties):void\n\t{\n\t\tprop.startTime = Math.random()*5;\n\t\tprop.duration = Math.random() * 4 + 0.1;\n\n\t\tvar degree1:number = Math.random() * Math.PI * 2;\n\t\tvar degree2:number = Math.random() * Math.PI * 2;\n\t\tvar r:number = 15;\n\t\tprop[ParticleVelocityNode.VELOCITY_VECTOR3D] = new Vector3D(r * Math.sin(degree1) * Math.cos(degree2), r * Math.cos(degree1) * Math.cos(degree2), r * Math.sin(degree2));\n\t}\n\n\t/**\n\t * Returns an array of active lights in the scene\n\t */\n\tprivate getAllLights():Array<any>\n\t{\n\t\tvar lights:Array<any> = new Array<any>();\n\n\t\tlights.push(this.directionalLight);\n\n\t\tvar fireVO:FireVO;\n\t\tfor (var i:number /*uint*/ = 0; i < this.fireObjects.length; i++) {\n\t\t\tfireVO = this.fireObjects[i];\n\t\t\tif (fireVO.light)\n\t\t\t\tlights.push(fireVO.light);\n\t\t}\n\n\t\treturn lights;\n\t}\n\n\t/**\n\t * Timer event handler\n\t */\n\tprivate onTimer(event:TimerEvent):void\n\t{\n\t\tvar fireObject:FireVO = this.fireObjects[this.fireTimer.currentCount-1];\n\n\t\t//start the animator\n\t\tfireObject.animator.start();\n\n\t\t//create the lightsource\n\t\tvar light:PointLight = new PointLight();\n\t\tlight.color = 0xFF3301;\n\t\tlight.diffuse = 0;\n\t\tlight.specular = 0;\n\t\tlight.transform.moveTo(fireObject.sprite.x, fireObject.sprite.y, fireObject.sprite.z);\n\n\t\t//add the lightsource to the fire object\n\t\tfireObject.light = light;\n\n\t\t//update the lightpicker\n\t\tthis.lightPicker.lights = this.getAllLights();\n\t}\n\n\t/**\n\t * Navigation and render loop\n\t */\n\tprivate onEnterFrame(dt:number):void\n\t{\n\t\tthis.time += dt;\n\n\t\t//animate lights\n\t\tvar fireVO:FireVO;\n\t\tfor (var i:number /*uint*/ = 0; i < this.fireObjects.length; i++) {\n\t\t\tfireVO = this.fireObjects[i];\n\n\t\t\t//update flame light\n\t\t\tvar light : PointLight = fireVO.light;\n\n\t\t\tif (!light)\n\t\t\t\tcontinue;\n\n\t\t\tif (fireVO.strength < 1)\n\t\t\t\tfireVO.strength += 0.1;\n\n\t\t\tlight.fallOff = 380+Math.random()*20;\n\t\t\tlight.radius = 200+Math.random()*30;\n\t\t\tlight.diffuse = light.specular = fireVO.strength+Math.random()*.2;\n\t\t}\n\n\t\tthis.view.render();\n\t}\n\n\t/**\n\t * Listener function for resource complete event on asset library\n\t */\n\tprivate onResourceComplete(event:LoaderEvent)\n\t{\n\t\tvar assets:IAsset[] = event.assets;\n\t\tvar length:number = assets.length;\n\n\t\tfor (var c:number = 0; c < length; c++) {\n\t\t\tvar asset:IAsset = assets[c];\n\n\t\t\tconsole.log(asset.name, event.url);\n\n\t\t\tswitch (event.url) {\n\t\t\t\t//plane textures\n\t\t\t\tcase \"assets/floor_diffuse.jpg\" :\n\t\t\t\t\tthis.planeMaterial.ambientMethod.texture = new Single2DTexture(<BitmapImage2D> asset);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"assets/floor_normal.jpg\" :\n\t\t\t\t\tthis.planeMaterial.normalMethod.texture = new Single2DTexture(<BitmapImage2D> asset);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"assets/floor_specular.jpg\" :\n\t\t\t\t\tthis.planeMaterial.specularMethod.texture = new Single2DTexture(<BitmapImage2D> asset);\n\t\t\t\t\tbreak;\n\n\t\t\t\t//particle texture\n\t\t\t\tcase \"assets/blue.png\" :\n\t\t\t\t\tthis.particleMaterial.ambientMethod.texture = new Single2DTexture(<BitmapImage2D> asset);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t /**\n\t * Mouse down listener for navigation\n\t */\n\tprivate onMouseDown(event:MouseEvent):void\n\t{\n\t\tthis.lastPanAngle = this.cameraController.panAngle;\n\t\tthis.lastTiltAngle = this.cameraController.tiltAngle;\n\t\tthis.lastMouseX = event.clientX;\n\t\tthis.lastMouseY = event.clientY;\n\t\tthis.move = true;\n\t}\n\n\t/**\n\t * Mouse up listener for navigation\n\t */\n\tprivate onMouseUp(event:MouseEvent):void\n\t{\n\t\tthis.move = false;\n\t}\n\n\tprivate onMouseMove(event:MouseEvent)\n\t{\n\t\tif (this.move) {\n\t\t\tthis.cameraController.panAngle = 0.3*(event.clientX - this.lastMouseX) + this.lastPanAngle;\n\t\t\tthis.cameraController.tiltAngle = 0.3*(event.clientY - this.lastMouseY) + this.lastTiltAngle;\n\t\t}\n\t}\n\n\t/**\n\t * stage listener for resize events\n\t */\n\tprivate onResize(event:UIEvent = null):void\n\t{\n\t\tthis.view.y = 0;\n\t\tthis.view.x = 0;\n\t\tthis.view.width = window.innerWidth;\n\t\tthis.view.height = window.innerHeight;\n\t}\n}\n\n/**\n* Data class for the fire objects\n*/\nclass FireVO\n{\n\tpublic sprite:Sprite;\n\tpublic animator:ParticleAnimator;\n\tpublic light:PointLight;\n\tpublic strength:number = 0;\n\n\tconstructor(sprite:Sprite, animator:ParticleAnimator)\n\t{\n\t\tthis.sprite = sprite;\n\t\tthis.animator = animator;\n\t}\n}\n\n\nwindow.onload = function ()\n{\n\tnew Basic_Fire();\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Basic_Fire.ts"],"sourceRoot":""}