/*

Vertex animation example in Away3d using the MD2 format

Demonstrates:

How to use the AssetLibrary class to load an embedded internal md2 model.
How to clone an asset from the AssetLibrary and apply different mateirals.
How to load animations into an animation set and apply to individual meshes.

Code by Rob Bateman
rob@infiniteturtles.co.uk
http://www.infiniteturtles.co.uk

Perelith Knight, by James Green (no email given)

This code is distributed under the MIT License

Copyright (c) The Away Foundation http://www.theawayfoundation.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the “Software”), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
var AssetEvent = require("awayjs-core/lib/events/AssetEvent");
var LoaderEvent = require("awayjs-core/lib/events/LoaderEvent");
var Vector3D = require("awayjs-core/lib/geom/Vector3D");
var AssetLibrary = require("awayjs-core/lib/library/AssetLibrary");
var AssetType = require("awayjs-core/lib/library/AssetType");
var URLRequest = require("awayjs-core/lib/net/URLRequest");
var Keyboard = require("awayjs-core/lib/ui/Keyboard");
var RequestAnimationFrame = require("awayjs-core/lib/utils/RequestAnimationFrame");
var View = require("awayjs-display/lib/containers/View");
var HoverController = require("awayjs-display/lib/controllers/HoverController");
var DirectionalLight = require("awayjs-display/lib/entities/DirectionalLight");
var StaticLightPicker = require("awayjs-display/lib/materials/lightpickers/StaticLightPicker");
var PrimitivePlanePrefab = require("awayjs-display/lib/prefabs/PrimitivePlanePrefab");
var VertexAnimator = require("awayjs-renderergl/lib/animators/VertexAnimator");
var DefaultRenderer = require("awayjs-renderergl/lib/DefaultRenderer");
var TriangleMethodMaterial = require("awayjs-methodmaterials/lib/TriangleMethodMaterial");
var ShadowFilteredMethod = require("awayjs-methodmaterials/lib/methods/ShadowFilteredMethod");
var MD2Parser = require("awayjs-parsers/lib/MD2Parser");
var Intermediate_PerelithKnight = (function () {
    /**
     * Constructor
     */
    function Intermediate_PerelithKnight() {
        var _this = this;
        this._meshInitialised = false;
        this._animationSetInitialised = false;
        this._sceneInitialised = false;
        //array of materials for random sampling
        this._pKnightTextures = new Array("assets/pknight1.png", "assets/pknight2.png", "assets/pknight3.png", "assets/pknight4.png");
        this._pKnightMaterials = new Array();
        this._time = 0;
        this._move = false;
        this._lookAtPosition = new Vector3D();
        //setup the view
        this._view = new View(new DefaultRenderer());
        //setup the camera for optimal rendering
        this._view.camera.projection.far = 5000;
        //setup controller to be used on the camera
        this._cameraController = new HoverController(this._view.camera, null, 45, 20, 2000, 5);
        //setup the help text
        /*
        var text:TextField = new TextField();
        text.defaultTextFormat = new TextFormat("Verdana", 11, 0xFFFFFF);
        text.embedFonts = true;
        text.antiAliasType = AntiAliasType.ADVANCED;
        text.gridFitType = GridFitType.PIXEL;
        text.width = 240;
        text.height = 100;
        text.selectable = false;
        text.mouseEnabled = false;
        text.text = "Click and drag - rotate\n" +
            "Cursor keys / WSAD / ZSQD - move\n" +
            "Scroll wheel - zoom";

        text.filters = [new DropShadowFilter(1, 45, 0x0, 1, 0, 0)];

        addChild(text);
        */
        //setup the lights for the scene
        this._light = new DirectionalLight(-0.5, -1, -1);
        this._light.ambient = 0.4;
        this._lightPicker = new StaticLightPicker([this._light]);
        this._view.scene.addChild(this._light);
        //setup listeners on AssetLibrary
        AssetLibrary.addEventListener(AssetEvent.ASSET_COMPLETE, function (event) { return _this.onAssetComplete(event); });
        AssetLibrary.addEventListener(LoaderEvent.RESOURCE_COMPLETE, function (event) { return _this.onResourceComplete(event); });
        //load perilith knight textures
        AssetLibrary.load(new URLRequest("assets/pknight1.png"));
        AssetLibrary.load(new URLRequest("assets/pknight2.png"));
        AssetLibrary.load(new URLRequest("assets/pknight3.png"));
        AssetLibrary.load(new URLRequest("assets/pknight4.png"));
        //load floor texture
        AssetLibrary.load(new URLRequest("assets/floor_diffuse.jpg"));
        //load perelith knight data
        AssetLibrary.load(new URLRequest("assets/pknight.md2"), null, null, new MD2Parser());
        //create a global shadow map method
        this._shadowMapMethod = new ShadowFilteredMethod(this._light);
        this._shadowMapMethod.epsilon = 0.2;
        //setup floor material
        this._floorMaterial = new TriangleMethodMaterial();
        this._floorMaterial.lightPicker = this._lightPicker;
        this._floorMaterial.specular = 0;
        this._floorMaterial.ambient = 1;
        this._floorMaterial.shadowMethod = this._shadowMapMethod;
        this._floorMaterial.repeat = true;
        for (var i = 0; i < this._pKnightTextures.length; i++) {
            var knightMaterial = new TriangleMethodMaterial();
            //knightMaterial.normalMap = Cast.bitmapTexture(BitmapFilterEffects.normalMap(bitmapData));
            //knightMaterial.specularMap = Cast.bitmapTexture(BitmapFilterEffects.outline(bitmapData));
            knightMaterial.lightPicker = this._lightPicker;
            knightMaterial.gloss = 30;
            knightMaterial.specular = 1;
            knightMaterial.ambient = 1;
            knightMaterial.shadowMethod = this._shadowMapMethod;
            this._pKnightMaterials.push(knightMaterial);
        }
        //setup the floor
        this._floor = new PrimitivePlanePrefab(5000, 5000).getNewObject();
        this._floor.material = this._floorMaterial;
        this._floor.geometry.scaleUV(5, 5);
        //setup the scene
        this._view.scene.addChild(this._floor);
        //add stats panel
        //addChild(_stats = new AwayStats(_view));
        //add listeners
        window.onresize = function (event) { return _this.onResize(event); };
        document.onmousedown = function (event) { return _this.onMouseDown(event); };
        document.onmouseup = function (event) { return _this.onMouseUp(event); };
        document.onmousemove = function (event) { return _this.onMouseMove(event); };
        document.onmousewheel = function (event) { return _this.onMouseWheel(event); };
        document.onkeydown = function (event) { return _this.onKeyDown(event); };
        document.onkeyup = function (event) { return _this.onKeyUp(event); };
        this.onResize();
        this._timer = new RequestAnimationFrame(this.onEnterFrame, this);
        this._timer.start();
    }
    /**
     * Navigation and render loop
     */
    Intermediate_PerelithKnight.prototype.onEnterFrame = function (dt) {
        this._time += dt;
        if (this._keyUp)
            this._lookAtPosition.x -= 10;
        if (this._keyDown)
            this._lookAtPosition.x += 10;
        if (this._keyLeft)
            this._lookAtPosition.z -= 10;
        if (this._keyRight)
            this._lookAtPosition.z += 10;
        this._cameraController.lookAtPosition = this._lookAtPosition;
        this._view.render();
    };
    /**
     * Listener for asset complete event on loader
     */
    Intermediate_PerelithKnight.prototype.onAssetComplete = function (event) {
        var asset = event.asset;
        switch (asset.assetType) {
            case AssetType.MESH:
                this._mesh = event.asset;
                //adjust the mesh
                this._mesh.y = 120;
                this._mesh.transform.scale = new Vector3D(5, 5, 5);
                this._meshInitialised = true;
                break;
            case AssetType.ANIMATION_SET:
                this._animationSet = event.asset;
                this._animationSetInitialised = true;
                break;
        }
        if (this._animationSetInitialised && this._meshInitialised && !this._sceneInitialised) {
            this._sceneInitialised = true;
            //create 20 x 20 different clones of the knight
            var numWide = 20;
            var numDeep = 20;
            var k = 0;
            for (var i = 0; i < numWide; i++) {
                for (var j = 0; j < numDeep; j++) {
                    //clone mesh
                    var clone = this._mesh.clone();
                    clone.x = (i - (numWide - 1) / 2) * 5000 / numWide;
                    clone.z = (j - (numDeep - 1) / 2) * 5000 / numDeep;
                    clone.castsShadows = true;
                    clone.material = this._pKnightMaterials[Math.floor(Math.random() * this._pKnightMaterials.length)];
                    this._view.scene.addChild(clone);
                    //create animator
                    var vertexAnimator = new VertexAnimator(this._animationSet);
                    //play specified state
                    vertexAnimator.play(this._animationSet.animationNames[Math.floor(Math.random() * this._animationSet.animationNames.length)], null, Math.random() * 1000);
                    clone.animator = vertexAnimator;
                    k++;
                }
            }
        }
    };
    /**
     * Listener function for resource complete event on asset library
     */
    Intermediate_PerelithKnight.prototype.onResourceComplete = function (event) {
        var assets = event.assets;
        var length = assets.length;
        for (var c = 0; c < length; c++) {
            var asset = assets[c];
            console.log(asset.name, event.url);
            switch (event.url) {
                case "assets/floor_diffuse.jpg":
                    this._floorMaterial.texture = asset;
                    break;
                case "assets/pknight1.png":
                case "assets/pknight2.png":
                case "assets/pknight3.png":
                case "assets/pknight4.png":
                    this._pKnightMaterials[this._pKnightTextures.indexOf(event.url)].texture = asset;
                    break;
                case "assets/pknight.md2":
                    break;
            }
        }
    };
    /**
     * Key down listener for animation
     */
    Intermediate_PerelithKnight.prototype.onKeyDown = function (event) {
        switch (event.keyCode) {
            case Keyboard.UP:
            case Keyboard.W:
            case Keyboard.Z:
                this._keyUp = true;
                break;
            case Keyboard.DOWN:
            case Keyboard.S:
                this._keyDown = true;
                break;
            case Keyboard.LEFT:
            case Keyboard.A:
            case Keyboard.Q:
                this._keyLeft = true;
                break;
            case Keyboard.RIGHT:
            case Keyboard.D:
                this._keyRight = true;
                break;
        }
    };
    /**
     * Key up listener
     */
    Intermediate_PerelithKnight.prototype.onKeyUp = function (event) {
        switch (event.keyCode) {
            case Keyboard.UP:
            case Keyboard.W:
            case Keyboard.Z:
                this._keyUp = false;
                break;
            case Keyboard.DOWN:
            case Keyboard.S:
                this._keyDown = false;
                break;
            case Keyboard.LEFT:
            case Keyboard.A:
            case Keyboard.Q:
                this._keyLeft = false;
                break;
            case Keyboard.RIGHT:
            case Keyboard.D:
                this._keyRight = false;
                break;
        }
    };
    /**
     * Mouse down listener for navigation
     */
    Intermediate_PerelithKnight.prototype.onMouseDown = function (event) {
        this._lastPanAngle = this._cameraController.panAngle;
        this._lastTiltAngle = this._cameraController.tiltAngle;
        this._lastMouseX = event.clientX;
        this._lastMouseY = event.clientY;
        this._move = true;
    };
    /**
     * Mouse up listener for navigation
     */
    Intermediate_PerelithKnight.prototype.onMouseUp = function (event) {
        this._move = false;
    };
    Intermediate_PerelithKnight.prototype.onMouseMove = function (event) {
        if (this._move) {
            this._cameraController.panAngle = 0.3 * (event.clientX - this._lastMouseX) + this._lastPanAngle;
            this._cameraController.tiltAngle = 0.3 * (event.clientY - this._lastMouseY) + this._lastTiltAngle;
        }
    };
    /**
     * Mouse wheel listener for navigation
     */
    Intermediate_PerelithKnight.prototype.onMouseWheel = function (event) {
        this._cameraController.distance -= event.wheelDelta;
        if (this._cameraController.distance < 100)
            this._cameraController.distance = 100;
        else if (this._cameraController.distance > 2000)
            this._cameraController.distance = 2000;
    };
    /**
     * Stage listener for resize events
     */
    Intermediate_PerelithKnight.prototype.onResize = function (event) {
        if (event === void 0) { event = null; }
        this._view.y = 0;
        this._view.x = 0;
        this._view.width = window.innerWidth;
        this._view.height = window.innerHeight;
    };
    return Intermediate_PerelithKnight;
})();
window.onload = function () {
    new Intermediate_PerelithKnight();
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9JbnRlcm1lZGlhdGVfUGVyZWxpdGhLbmlnaHQudHMiXSwibmFtZXMiOlsiSW50ZXJtZWRpYXRlX1BlcmVsaXRoS25pZ2h0IiwiSW50ZXJtZWRpYXRlX1BlcmVsaXRoS25pZ2h0LmNvbnN0cnVjdG9yIiwiSW50ZXJtZWRpYXRlX1BlcmVsaXRoS25pZ2h0Lm9uRW50ZXJGcmFtZSIsIkludGVybWVkaWF0ZV9QZXJlbGl0aEtuaWdodC5vbkFzc2V0Q29tcGxldGUiLCJJbnRlcm1lZGlhdGVfUGVyZWxpdGhLbmlnaHQub25SZXNvdXJjZUNvbXBsZXRlIiwiSW50ZXJtZWRpYXRlX1BlcmVsaXRoS25pZ2h0Lm9uS2V5RG93biIsIkludGVybWVkaWF0ZV9QZXJlbGl0aEtuaWdodC5vbktleVVwIiwiSW50ZXJtZWRpYXRlX1BlcmVsaXRoS25pZ2h0Lm9uTW91c2VEb3duIiwiSW50ZXJtZWRpYXRlX1BlcmVsaXRoS25pZ2h0Lm9uTW91c2VVcCIsIkludGVybWVkaWF0ZV9QZXJlbGl0aEtuaWdodC5vbk1vdXNlTW92ZSIsIkludGVybWVkaWF0ZV9QZXJlbGl0aEtuaWdodC5vbk1vdXNlV2hlZWwiLCJJbnRlcm1lZGlhdGVfUGVyZWxpdGhLbmlnaHQub25SZXNpemUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXNDRTtBQUVGLElBQU8sVUFBVSxXQUFlLG1DQUFtQyxDQUFDLENBQUM7QUFDckUsSUFBTyxXQUFXLFdBQWUsb0NBQW9DLENBQUMsQ0FBQztBQUN2RSxJQUFPLFFBQVEsV0FBZ0IsK0JBQStCLENBQUMsQ0FBQztBQUNoRSxJQUFPLFlBQVksV0FBZSxzQ0FBc0MsQ0FBQyxDQUFDO0FBQzFFLElBQU8sU0FBUyxXQUFrQixtQ0FBbUMsQ0FBQyxDQUFDO0FBRXZFLElBQU8sVUFBVSxXQUFlLGdDQUFnQyxDQUFDLENBQUM7QUFDbEUsSUFBTyxRQUFRLFdBQWdCLDZCQUE2QixDQUFDLENBQUM7QUFFOUQsSUFBTyxxQkFBcUIsV0FBWSw2Q0FBNkMsQ0FBQyxDQUFDO0FBRXZGLElBQU8sSUFBSSxXQUFpQixvQ0FBb0MsQ0FBQyxDQUFDO0FBQ2xFLElBQU8sZUFBZSxXQUFjLGdEQUFnRCxDQUFDLENBQUM7QUFFdEYsSUFBTyxnQkFBZ0IsV0FBYyw4Q0FBOEMsQ0FBQyxDQUFDO0FBRXJGLElBQU8saUJBQWlCLFdBQWEsNkRBQTZELENBQUMsQ0FBQztBQUNwRyxJQUFPLG9CQUFvQixXQUFhLGlEQUFpRCxDQUFDLENBQUM7QUFHM0YsSUFBTyxjQUFjLFdBQWMsZ0RBQWdELENBQUMsQ0FBQztBQUVyRixJQUFPLGVBQWUsV0FBYyx1Q0FBdUMsQ0FBQyxDQUFDO0FBRTdFLElBQU8sc0JBQXNCLFdBQVksbURBQW1ELENBQUMsQ0FBQztBQUM5RixJQUFPLG9CQUFvQixXQUFhLHlEQUF5RCxDQUFDLENBQUM7QUFFbkcsSUFBTyxTQUFTLFdBQWUsOEJBQThCLENBQUMsQ0FBQztBQUUvRCxJQUFNLDJCQUEyQjtJQTZDN0JBOztPQUVHQTtJQUNIQSxTQWhERUEsMkJBQTJCQTtRQUFqQ0MsaUJBbVhDQTtRQWhYV0EscUJBQWdCQSxHQUF3QkEsS0FBS0EsQ0FBQ0E7UUFDOUNBLDZCQUF3QkEsR0FBZ0JBLEtBQUtBLENBQUNBO1FBQzlDQSxzQkFBaUJBLEdBQXVCQSxLQUFLQSxDQUFDQTtRQUV0REEsd0NBQXdDQTtRQUNoQ0EscUJBQWdCQSxHQUFpQkEsSUFBSUEsS0FBS0EsQ0FBU0EscUJBQXFCQSxFQUFFQSxxQkFBcUJBLEVBQUVBLHFCQUFxQkEsRUFBRUEscUJBQXFCQSxDQUFDQSxDQUFDQTtRQUMvSUEsc0JBQWlCQSxHQUFpQ0EsSUFBSUEsS0FBS0EsRUFBMEJBLENBQUNBO1FBdUJ0RkEsVUFBS0EsR0FBVUEsQ0FBQ0EsQ0FBQ0E7UUFDakJBLFVBQUtBLEdBQVdBLEtBQUtBLENBQUNBO1FBU3RCQSxvQkFBZUEsR0FBWUEsSUFBSUEsUUFBUUEsRUFBRUEsQ0FBQ0E7UUFROUNBLEFBQ0FBLGdCQURnQkE7UUFDaEJBLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLElBQUlBLElBQUlBLENBQUNBLElBQUlBLGVBQWVBLEVBQUVBLENBQUNBLENBQUNBO1FBRTdDQSxBQUNBQSx3Q0FEd0NBO1FBQ3hDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxVQUFVQSxDQUFDQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUV4Q0EsQUFDQUEsMkNBRDJDQTtRQUMzQ0EsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxHQUFHQSxJQUFJQSxlQUFlQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxFQUFFQSxJQUFJQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxJQUFJQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUV2RkEsQUFxQkFBLHFCQXJCcUJBO1FBQ3JCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7VUFpQkVBO1FBRUZBLGdDQUFnQ0E7UUFDaENBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLElBQUlBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDakRBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLE9BQU9BLEdBQUdBLEdBQUdBLENBQUNBO1FBQzFCQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxJQUFJQSxpQkFBaUJBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO1FBQ3pEQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUV2Q0EsQUFDQUEsaUNBRGlDQTtRQUNqQ0EsWUFBWUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxVQUFVQSxDQUFDQSxjQUFjQSxFQUFFQSxVQUFDQSxLQUFnQkEsSUFBS0EsT0FBQUEsS0FBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsRUFBM0JBLENBQTJCQSxDQUFDQSxDQUFDQTtRQUM1R0EsWUFBWUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxXQUFXQSxDQUFDQSxpQkFBaUJBLEVBQUVBLFVBQUNBLEtBQWlCQSxJQUFLQSxPQUFBQSxLQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBLEtBQUtBLENBQUNBLEVBQTlCQSxDQUE4QkEsQ0FBQ0EsQ0FBQ0E7UUFFcEhBLEFBQ0FBLCtCQUQrQkE7UUFDL0JBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLFVBQVVBLENBQUNBLHFCQUFxQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDekRBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLFVBQVVBLENBQUNBLHFCQUFxQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDekRBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLFVBQVVBLENBQUNBLHFCQUFxQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDekRBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLFVBQVVBLENBQUNBLHFCQUFxQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFekRBLEFBQ0FBLG9CQURvQkE7UUFDcEJBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLFVBQVVBLENBQUNBLDBCQUEwQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFOURBLEFBQ0FBLDJCQUQyQkE7UUFDM0JBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLFVBQVVBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsRUFBRUEsSUFBSUEsRUFBRUEsSUFBSUEsRUFBRUEsSUFBSUEsU0FBU0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7UUFFckZBLEFBQ0FBLG1DQURtQ0E7UUFDbkNBLElBQUlBLENBQUNBLGdCQUFnQkEsR0FBR0EsSUFBSUEsb0JBQW9CQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUM5REEsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxPQUFPQSxHQUFHQSxHQUFHQSxDQUFDQTtRQUVwQ0EsQUFDQUEsc0JBRHNCQTtRQUN0QkEsSUFBSUEsQ0FBQ0EsY0FBY0EsR0FBR0EsSUFBSUEsc0JBQXNCQSxFQUFFQSxDQUFDQTtRQUNuREEsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsV0FBV0EsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0E7UUFDcERBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLFFBQVFBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2pDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxPQUFPQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNoQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQTtRQUN6REEsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFHbENBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQW9CQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO1lBQ3JFQSxJQUFJQSxjQUFjQSxHQUEwQkEsSUFBSUEsc0JBQXNCQSxFQUFFQSxDQUFDQTtZQUN6RUEsQUFFQUEsMkZBRjJGQTtZQUMzRkEsMkZBQTJGQTtZQUMzRkEsY0FBY0EsQ0FBQ0EsV0FBV0EsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0E7WUFDL0NBLGNBQWNBLENBQUNBLEtBQUtBLEdBQUdBLEVBQUVBLENBQUNBO1lBQzFCQSxjQUFjQSxDQUFDQSxRQUFRQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUM1QkEsY0FBY0EsQ0FBQ0EsT0FBT0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDM0JBLGNBQWNBLENBQUNBLFlBQVlBLEdBQUdBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0E7WUFDcERBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsQ0FBQ0E7UUFDaERBLENBQUNBO1FBRURBLEFBQ0FBLGlCQURpQkE7UUFDakJBLElBQUlBLENBQUNBLE1BQU1BLEdBQVVBLElBQUlBLG9CQUFvQkEsQ0FBQ0EsSUFBSUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsWUFBWUEsRUFBRUEsQ0FBQ0E7UUFDekVBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBO1FBQzNDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUVuQ0EsQUFDQUEsaUJBRGlCQTtRQUNqQkEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFFdkNBLEFBSUFBLGlCQUppQkE7UUFDakJBLDBDQUEwQ0E7UUFFMUNBLGVBQWVBO1FBQ2ZBLE1BQU1BLENBQUNBLFFBQVFBLEdBQUlBLFVBQUNBLEtBQWFBLElBQUtBLE9BQUFBLEtBQUlBLENBQUNBLFFBQVFBLENBQUNBLEtBQUtBLENBQUNBLEVBQXBCQSxDQUFvQkEsQ0FBQ0E7UUFFM0RBLFFBQVFBLENBQUNBLFdBQVdBLEdBQUdBLFVBQUNBLEtBQWdCQSxJQUFLQSxPQUFBQSxLQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxLQUFLQSxDQUFDQSxFQUF2QkEsQ0FBdUJBLENBQUNBO1FBQ3JFQSxRQUFRQSxDQUFDQSxTQUFTQSxHQUFHQSxVQUFDQSxLQUFnQkEsSUFBS0EsT0FBQUEsS0FBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsRUFBckJBLENBQXFCQSxDQUFDQTtRQUNqRUEsUUFBUUEsQ0FBQ0EsV0FBV0EsR0FBR0EsVUFBQ0EsS0FBZ0JBLElBQUtBLE9BQUFBLEtBQUlBLENBQUNBLFdBQVdBLENBQUNBLEtBQUtBLENBQUNBLEVBQXZCQSxDQUF1QkEsQ0FBQ0E7UUFDckVBLFFBQVFBLENBQUNBLFlBQVlBLEdBQUdBLFVBQUNBLEtBQXFCQSxJQUFLQSxPQUFBQSxLQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxLQUFLQSxDQUFDQSxFQUF4QkEsQ0FBd0JBLENBQUNBO1FBQzVFQSxRQUFRQSxDQUFDQSxTQUFTQSxHQUFHQSxVQUFDQSxLQUFtQkEsSUFBS0EsT0FBQUEsS0FBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsRUFBckJBLENBQXFCQSxDQUFDQTtRQUNwRUEsUUFBUUEsQ0FBQ0EsT0FBT0EsR0FBR0EsVUFBQ0EsS0FBbUJBLElBQUtBLE9BQUFBLEtBQUlBLENBQUNBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLEVBQW5CQSxDQUFtQkEsQ0FBQ0E7UUFDaEVBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLENBQUNBO1FBRWhCQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxJQUFJQSxxQkFBcUJBLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1FBQ2pFQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtJQUN4QkEsQ0FBQ0E7SUFFREQ7O09BRUdBO0lBQ0tBLGtEQUFZQSxHQUFwQkEsVUFBcUJBLEVBQVNBO1FBRTFCRSxJQUFJQSxDQUFDQSxLQUFLQSxJQUFJQSxFQUFFQSxDQUFDQTtRQUVqQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7WUFDWkEsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0E7UUFDakNBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBO1lBQ2RBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBO1FBQ2pDQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQTtZQUNkQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQTtRQUNqQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7WUFDZkEsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0E7UUFFakNBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsY0FBY0EsR0FBR0EsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0E7UUFFN0RBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBO0lBQ3hCQSxDQUFDQTtJQUVERjs7T0FFR0E7SUFDS0EscURBQWVBLEdBQXZCQSxVQUF3QkEsS0FBZ0JBO1FBRXBDRyxJQUFJQSxLQUFLQSxHQUFVQSxLQUFLQSxDQUFDQSxLQUFLQSxDQUFDQTtRQUUvQkEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FDeEJBLENBQUNBO1lBQ0dBLEtBQUtBLFNBQVNBLENBQUNBLElBQUlBO2dCQUNmQSxJQUFJQSxDQUFDQSxLQUFLQSxHQUFVQSxLQUFLQSxDQUFDQSxLQUFLQSxDQUFDQTtnQkFFaENBLEFBQ0FBLGlCQURpQkE7Z0JBQ2pCQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQTtnQkFDbkJBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLFNBQVNBLENBQUNBLEtBQUtBLEdBQUdBLElBQUlBLFFBQVFBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO2dCQUVuREEsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFHN0JBLEtBQUtBLENBQUNBO1lBQ1ZBLEtBQUtBLFNBQVNBLENBQUNBLGFBQWFBO2dCQUN4QkEsSUFBSUEsQ0FBQ0EsYUFBYUEsR0FBd0JBLEtBQUtBLENBQUNBLEtBQUtBLENBQUNBO2dCQUN0REEsSUFBSUEsQ0FBQ0Esd0JBQXdCQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFDckNBLEtBQUtBLENBQUNBO1FBQ2RBLENBQUNBO1FBRURBLEVBQUVBLENBQUNBLENBQUVBLElBQUlBLENBQUNBLHdCQUF3QkEsSUFBSUEsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxJQUFJQSxDQUFFQSxJQUFJQSxDQUFDQSxpQkFBaUJBLENBQUNBLENBQ3hGQSxDQUFDQTtZQUNHQSxJQUFJQSxDQUFDQSxpQkFBaUJBLEdBQUdBLElBQUlBLENBQUNBO1lBQzlCQSxBQUNBQSwrQ0FEK0NBO2dCQUMzQ0EsT0FBT0EsR0FBVUEsRUFBRUEsQ0FBQ0E7WUFDeEJBLElBQUlBLE9BQU9BLEdBQVVBLEVBQUVBLENBQUNBO1lBQ3hCQSxJQUFJQSxDQUFDQSxHQUFtQkEsQ0FBQ0EsQ0FBQ0E7WUFDMUJBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQW9CQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxPQUFPQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtnQkFDaERBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQW9CQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxPQUFPQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtvQkFDaERBLEFBQ0FBLFlBRFlBO3dCQUNSQSxLQUFLQSxHQUFlQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtvQkFDM0NBLEtBQUtBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLE9BQU9BLEdBQUNBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBLEdBQUNBLElBQUlBLEdBQUNBLE9BQU9BLENBQUNBO29CQUN6Q0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsT0FBT0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsSUFBSUEsR0FBQ0EsT0FBT0EsQ0FBQ0E7b0JBQ3pDQSxLQUFLQSxDQUFDQSxZQUFZQSxHQUFHQSxJQUFJQSxDQUFDQTtvQkFDMUJBLEtBQUtBLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsRUFBRUEsR0FBQ0EsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDakdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLEtBQUtBLENBQUNBLFFBQVFBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO29CQUVqQ0EsQUFDQUEsaUJBRGlCQTt3QkFDYkEsY0FBY0EsR0FBa0JBLElBQUlBLGNBQWNBLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBO29CQUUzRUEsQUFDQUEsc0JBRHNCQTtvQkFDdEJBLGNBQWNBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLGNBQWNBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLEdBQUNBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLGNBQWNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLEVBQUVBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLEdBQUNBLElBQUlBLENBQUNBLENBQUNBO29CQUNySkEsS0FBS0EsQ0FBQ0EsUUFBUUEsR0FBR0EsY0FBY0EsQ0FBQ0E7b0JBQ2hDQSxDQUFDQSxFQUFFQSxDQUFDQTtnQkFDUkEsQ0FBQ0E7WUFDTEEsQ0FBQ0E7UUFDTEEsQ0FBQ0E7SUFFTEEsQ0FBQ0E7SUFFREg7O09BRUdBO0lBQ0tBLHdEQUFrQkEsR0FBMUJBLFVBQTJCQSxLQUFpQkE7UUFFeENJLElBQUlBLE1BQU1BLEdBQWlCQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUN4Q0EsSUFBSUEsTUFBTUEsR0FBVUEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7UUFFbENBLEdBQUdBLENBQUNBLENBQUVBLEdBQUdBLENBQUNBLENBQUNBLEdBQVlBLENBQUNBLEVBQUdBLENBQUNBLEdBQUdBLE1BQU1BLEVBQUdBLENBQUNBLEVBQUdBLEVBQzVDQSxDQUFDQTtZQUNHQSxJQUFJQSxLQUFLQSxHQUFVQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUU3QkEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsRUFBRUEsS0FBS0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFFbkNBLE1BQU1BLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLENBQUNBLENBQ2xCQSxDQUFDQTtnQkFFR0EsS0FBS0EsMEJBQTBCQTtvQkFDM0JBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLE9BQU9BLEdBQW1CQSxLQUFLQSxDQUFDQTtvQkFDcERBLEtBQUtBLENBQUNBO2dCQUdWQSxLQUFLQSxxQkFBcUJBLENBQUVBO2dCQUM1QkEsS0FBS0EscUJBQXFCQSxDQUFFQTtnQkFDNUJBLEtBQUtBLHFCQUFxQkEsQ0FBRUE7Z0JBQzVCQSxLQUFLQSxxQkFBcUJBO29CQUN0QkEsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLE9BQU9BLEdBQW1CQSxLQUFLQSxDQUFDQTtvQkFDakdBLEtBQUtBLENBQUNBO2dCQUdWQSxLQUFLQSxvQkFBb0JBO29CQUVyQkEsS0FBS0EsQ0FBQ0E7WUFDZEEsQ0FBQ0E7UUFDTEEsQ0FBQ0E7SUFDTEEsQ0FBQ0E7SUFFREo7O09BRUdBO0lBQ0tBLCtDQUFTQSxHQUFqQkEsVUFBa0JBLEtBQW1CQTtRQUVqQ0ssTUFBTUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDcEJBLEtBQUtBLFFBQVFBLENBQUNBLEVBQUVBLENBQUNBO1lBQ2pCQSxLQUFLQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNoQkEsS0FBS0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ1hBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBO2dCQUNuQkEsS0FBS0EsQ0FBQ0E7WUFDVkEsS0FBS0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7WUFDbkJBLEtBQUtBLFFBQVFBLENBQUNBLENBQUNBO2dCQUNYQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFDckJBLEtBQUtBLENBQUNBO1lBQ1ZBLEtBQUtBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBO1lBQ25CQSxLQUFLQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNoQkEsS0FBS0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ1hBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBO2dCQUNyQkEsS0FBS0EsQ0FBQ0E7WUFDVkEsS0FBS0EsUUFBUUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7WUFDcEJBLEtBQUtBLFFBQVFBLENBQUNBLENBQUNBO2dCQUNYQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFDdEJBLEtBQUtBLENBQUNBO1FBQ2RBLENBQUNBO0lBQ0xBLENBQUNBO0lBRURMOztPQUVHQTtJQUNLQSw2Q0FBT0EsR0FBZkEsVUFBZ0JBLEtBQW1CQTtRQUUvQk0sTUFBTUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDcEJBLEtBQUtBLFFBQVFBLENBQUNBLEVBQUVBLENBQUNBO1lBQ2pCQSxLQUFLQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNoQkEsS0FBS0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ1hBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLEtBQUtBLENBQUNBO2dCQUNwQkEsS0FBS0EsQ0FBQ0E7WUFDVkEsS0FBS0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7WUFDbkJBLEtBQUtBLFFBQVFBLENBQUNBLENBQUNBO2dCQUNYQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxLQUFLQSxDQUFDQTtnQkFDdEJBLEtBQUtBLENBQUNBO1lBQ1ZBLEtBQUtBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBO1lBQ25CQSxLQUFLQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNoQkEsS0FBS0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ1hBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLEtBQUtBLENBQUNBO2dCQUN0QkEsS0FBS0EsQ0FBQ0E7WUFDVkEsS0FBS0EsUUFBUUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7WUFDcEJBLEtBQUtBLFFBQVFBLENBQUNBLENBQUNBO2dCQUNYQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxLQUFLQSxDQUFDQTtnQkFDdkJBLEtBQUtBLENBQUNBO1FBQ2RBLENBQUNBO0lBQ0xBLENBQUNBO0lBRUROOztPQUVHQTtJQUNLQSxpREFBV0EsR0FBbkJBLFVBQW9CQSxLQUFnQkE7UUFFaENPLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsUUFBUUEsQ0FBQ0E7UUFDckRBLElBQUlBLENBQUNBLGNBQWNBLEdBQUdBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7UUFDdkRBLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLEtBQUtBLENBQUNBLE9BQU9BLENBQUNBO1FBQ2pDQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxLQUFLQSxDQUFDQSxPQUFPQSxDQUFDQTtRQUNqQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0E7SUFDdEJBLENBQUNBO0lBRURQOztPQUVHQTtJQUNLQSwrQ0FBU0EsR0FBakJBLFVBQWtCQSxLQUFnQkE7UUFFOUJRLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLEtBQUtBLENBQUNBO0lBQ3ZCQSxDQUFDQTtJQUVPUixpREFBV0EsR0FBbkJBLFVBQW9CQSxLQUFnQkE7UUFFaENTLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBO1lBQ2JBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsUUFBUUEsR0FBR0EsR0FBR0EsR0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0E7WUFDOUZBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsU0FBU0EsR0FBR0EsR0FBR0EsR0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0E7UUFDcEdBLENBQUNBO0lBQ0xBLENBQUNBO0lBRURUOztPQUVHQTtJQUNLQSxrREFBWUEsR0FBcEJBLFVBQXFCQSxLQUFxQkE7UUFFdENVLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsUUFBUUEsSUFBSUEsS0FBS0EsQ0FBQ0EsVUFBVUEsQ0FBQ0E7UUFFcERBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsUUFBUUEsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDdENBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsUUFBUUEsR0FBR0EsR0FBR0EsQ0FBQ0E7UUFDMUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDNUNBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0E7SUFDL0NBLENBQUNBO0lBRURWOztPQUVHQTtJQUNLQSw4Q0FBUUEsR0FBaEJBLFVBQWlCQSxLQUFvQkE7UUFBcEJXLHFCQUFvQkEsR0FBcEJBLFlBQW9CQTtRQUVqQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDakJBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2pCQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxHQUFHQSxNQUFNQSxDQUFDQSxVQUFVQSxDQUFDQTtRQUNyQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0E7SUFDM0NBLENBQUNBO0lBQ0xYLGtDQUFDQTtBQUFEQSxDQW5YQSxBQW1YQ0EsSUFBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLEdBQUc7SUFFWixJQUFJLDJCQUEyQixFQUFFLENBQUM7QUFDdEMsQ0FBQyxDQUFBIiwiZmlsZSI6IkludGVybWVkaWF0ZV9QZXJlbGl0aEtuaWdodC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5cblZlcnRleCBhbmltYXRpb24gZXhhbXBsZSBpbiBBd2F5M2QgdXNpbmcgdGhlIE1EMiBmb3JtYXRcblxuRGVtb25zdHJhdGVzOlxuXG5Ib3cgdG8gdXNlIHRoZSBBc3NldExpYnJhcnkgY2xhc3MgdG8gbG9hZCBhbiBlbWJlZGRlZCBpbnRlcm5hbCBtZDIgbW9kZWwuXG5Ib3cgdG8gY2xvbmUgYW4gYXNzZXQgZnJvbSB0aGUgQXNzZXRMaWJyYXJ5IGFuZCBhcHBseSBkaWZmZXJlbnQgbWF0ZWlyYWxzLlxuSG93IHRvIGxvYWQgYW5pbWF0aW9ucyBpbnRvIGFuIGFuaW1hdGlvbiBzZXQgYW5kIGFwcGx5IHRvIGluZGl2aWR1YWwgbWVzaGVzLlxuXG5Db2RlIGJ5IFJvYiBCYXRlbWFuXG5yb2JAaW5maW5pdGV0dXJ0bGVzLmNvLnVrXG5odHRwOi8vd3d3LmluZmluaXRldHVydGxlcy5jby51a1xuXG5QZXJlbGl0aCBLbmlnaHQsIGJ5IEphbWVzIEdyZWVuIChubyBlbWFpbCBnaXZlbilcblxuVGhpcyBjb2RlIGlzIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIFRoZSBBd2F5IEZvdW5kYXRpb24gaHR0cDovL3d3dy50aGVhd2F5Zm91bmRhdGlvbi5vcmdcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUg4oCcU29mdHdhcmXigJ0pLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIOKAnEFTIElT4oCdLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS5cblxuKi9cblxuaW1wb3J0IEFzc2V0RXZlbnRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2V2ZW50cy9Bc3NldEV2ZW50XCIpO1xuaW1wb3J0IExvYWRlckV2ZW50XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9ldmVudHMvTG9hZGVyRXZlbnRcIik7XG5pbXBvcnQgVmVjdG9yM0RcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9WZWN0b3IzRFwiKTtcbmltcG9ydCBBc3NldExpYnJhcnlcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2xpYnJhcnkvQXNzZXRMaWJyYXJ5XCIpO1xuaW1wb3J0IEFzc2V0VHlwZSAgIFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvbGlicmFyeS9Bc3NldFR5cGVcIik7XG5pbXBvcnQgSUFzc2V0ICAgXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9saWJyYXJ5L0lBc3NldFwiKTtcbmltcG9ydCBVUkxSZXF1ZXN0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9uZXQvVVJMUmVxdWVzdFwiKTtcbmltcG9ydCBLZXlib2FyZCBcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3VpL0tleWJvYXJkXCIpO1xuaW1wb3J0IFRleHR1cmUyREJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi90ZXh0dXJlcy9UZXh0dXJlMkRCYXNlXCIpO1xuaW1wb3J0IFJlcXVlc3RBbmltYXRpb25GcmFtZVx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdXRpbHMvUmVxdWVzdEFuaW1hdGlvbkZyYW1lXCIpO1xuXG5pbXBvcnQgVmlld1x0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2NvbnRhaW5lcnMvVmlld1wiKTtcbmltcG9ydCBIb3ZlckNvbnRyb2xsZXJcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9jb250cm9sbGVycy9Ib3ZlckNvbnRyb2xsZXJcIik7XG5pbXBvcnQgQ2FtZXJhXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2VudGl0aWVzL0NhbWVyYVwiKTtcbmltcG9ydCBEaXJlY3Rpb25hbExpZ2h0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvZW50aXRpZXMvRGlyZWN0aW9uYWxMaWdodFwiKTtcbmltcG9ydCBNZXNoXHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvZW50aXRpZXMvTWVzaFwiKTtcbmltcG9ydCBTdGF0aWNMaWdodFBpY2tlclx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9tYXRlcmlhbHMvbGlnaHRwaWNrZXJzL1N0YXRpY0xpZ2h0UGlja2VyXCIpO1xuaW1wb3J0IFByaW1pdGl2ZVBsYW5lUHJlZmFiXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL3ByZWZhYnMvUHJpbWl0aXZlUGxhbmVQcmVmYWJcIik7XG5cbmltcG9ydCBWZXJ0ZXhBbmltYXRpb25TZXRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL1ZlcnRleEFuaW1hdGlvblNldFwiKTtcbmltcG9ydCBWZXJ0ZXhBbmltYXRvclx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9WZXJ0ZXhBbmltYXRvclwiKTtcblxuaW1wb3J0IERlZmF1bHRSZW5kZXJlclx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL0RlZmF1bHRSZW5kZXJlclwiKTtcblxuaW1wb3J0IFRyaWFuZ2xlTWV0aG9kTWF0ZXJpYWxcdFx0PSByZXF1aXJlKFwiYXdheWpzLW1ldGhvZG1hdGVyaWFscy9saWIvVHJpYW5nbGVNZXRob2RNYXRlcmlhbFwiKTtcbmltcG9ydCBTaGFkb3dGaWx0ZXJlZE1ldGhvZFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1tZXRob2RtYXRlcmlhbHMvbGliL21ldGhvZHMvU2hhZG93RmlsdGVyZWRNZXRob2RcIik7XG5cbmltcG9ydCBNRDJQYXJzZXJcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXBhcnNlcnMvbGliL01EMlBhcnNlclwiKTtcblxuY2xhc3MgSW50ZXJtZWRpYXRlX1BlcmVsaXRoS25pZ2h0XG57XG5cbiAgICBwcml2YXRlIF9tZXNoSW5pdGlhbGlzZWQgICAgICAgICAgICA6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIF9hbmltYXRpb25TZXRJbml0aWFsaXNlZCAgICA6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIF9zY2VuZUluaXRpYWxpc2VkICAgICAgICAgICA6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8vYXJyYXkgb2YgbWF0ZXJpYWxzIGZvciByYW5kb20gc2FtcGxpbmdcbiAgICBwcml2YXRlIF9wS25pZ2h0VGV4dHVyZXM6QXJyYXk8c3RyaW5nPiA9IG5ldyBBcnJheTxzdHJpbmc+KFwiYXNzZXRzL3BrbmlnaHQxLnBuZ1wiLCBcImFzc2V0cy9wa25pZ2h0Mi5wbmdcIiwgXCJhc3NldHMvcGtuaWdodDMucG5nXCIsIFwiYXNzZXRzL3BrbmlnaHQ0LnBuZ1wiKTtcbiAgICBwcml2YXRlIF9wS25pZ2h0TWF0ZXJpYWxzOkFycmF5PFRyaWFuZ2xlTWV0aG9kTWF0ZXJpYWw+ID0gbmV3IEFycmF5PFRyaWFuZ2xlTWV0aG9kTWF0ZXJpYWw+KCk7XG5cbiAgICAvL2VuZ2luZSB2YXJpYWJsZXNcbiAgICBwcml2YXRlIF92aWV3OlZpZXc7XG4gICAgcHJpdmF0ZSBfY2FtZXJhQ29udHJvbGxlcjpIb3ZlckNvbnRyb2xsZXI7XG5cbiAgICAvL3N0YXRzXG4gICAgLy9wcml2YXRlIF9zdGF0czpBd2F5U3RhdHM7XG5cbiAgICAvL2xpZ2h0IG9iamVjdHNcbiAgICBwcml2YXRlIF9saWdodDpEaXJlY3Rpb25hbExpZ2h0O1xuICAgIHByaXZhdGUgX2xpZ2h0UGlja2VyOlN0YXRpY0xpZ2h0UGlja2VyO1xuXG4gICAgLy9tYXRlcmlhbCBvYmplY3RzXG4gICAgcHJpdmF0ZSBfZmxvb3JNYXRlcmlhbDpUcmlhbmdsZU1ldGhvZE1hdGVyaWFsO1xuICAgIHByaXZhdGUgX3NoYWRvd01hcE1ldGhvZDpTaGFkb3dGaWx0ZXJlZE1ldGhvZDtcblxuICAgIC8vc2NlbmUgb2JqZWN0c1xuICAgIHByaXZhdGUgX2Zsb29yOk1lc2g7XG4gICAgcHJpdmF0ZSBfbWVzaDpNZXNoO1xuXG4gICAgLy9uYXZpZ2F0aW9uIHZhcmlhYmxlc1xuICAgIHByaXZhdGUgX3RpbWVyOlJlcXVlc3RBbmltYXRpb25GcmFtZTtcbiAgICBwcml2YXRlIF90aW1lOm51bWJlciA9IDA7XG4gICAgcHJpdmF0ZSBfbW92ZTpib29sZWFuID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBfbGFzdFBhbkFuZ2xlOm51bWJlcjtcbiAgICBwcml2YXRlIF9sYXN0VGlsdEFuZ2xlOm51bWJlcjtcbiAgICBwcml2YXRlIF9sYXN0TW91c2VYOm51bWJlcjtcbiAgICBwcml2YXRlIF9sYXN0TW91c2VZOm51bWJlcjtcbiAgICBwcml2YXRlIF9rZXlVcDpib29sZWFuO1xuICAgIHByaXZhdGUgX2tleURvd246Ym9vbGVhbjtcbiAgICBwcml2YXRlIF9rZXlMZWZ0OmJvb2xlYW47XG4gICAgcHJpdmF0ZSBfa2V5UmlnaHQ6Ym9vbGVhbjtcbiAgICBwcml2YXRlIF9sb29rQXRQb3NpdGlvbjpWZWN0b3IzRCA9IG5ldyBWZWN0b3IzRCgpO1xuICAgIHByaXZhdGUgX2FuaW1hdGlvblNldDpWZXJ0ZXhBbmltYXRpb25TZXQ7XG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKClcbiAgICB7XG4gICAgICAgIC8vc2V0dXAgdGhlIHZpZXdcbiAgICAgICAgdGhpcy5fdmlldyA9IG5ldyBWaWV3KG5ldyBEZWZhdWx0UmVuZGVyZXIoKSk7XG5cbiAgICAgICAgLy9zZXR1cCB0aGUgY2FtZXJhIGZvciBvcHRpbWFsIHJlbmRlcmluZ1xuICAgICAgICB0aGlzLl92aWV3LmNhbWVyYS5wcm9qZWN0aW9uLmZhciA9IDUwMDA7XG5cbiAgICAgICAgLy9zZXR1cCBjb250cm9sbGVyIHRvIGJlIHVzZWQgb24gdGhlIGNhbWVyYVxuICAgICAgICB0aGlzLl9jYW1lcmFDb250cm9sbGVyID0gbmV3IEhvdmVyQ29udHJvbGxlcih0aGlzLl92aWV3LmNhbWVyYSwgbnVsbCwgNDUsIDIwLCAyMDAwLCA1KTtcblxuICAgICAgICAvL3NldHVwIHRoZSBoZWxwIHRleHRcbiAgICAgICAgLypcbiAgICAgICAgdmFyIHRleHQ6VGV4dEZpZWxkID0gbmV3IFRleHRGaWVsZCgpO1xuICAgICAgICB0ZXh0LmRlZmF1bHRUZXh0Rm9ybWF0ID0gbmV3IFRleHRGb3JtYXQoXCJWZXJkYW5hXCIsIDExLCAweEZGRkZGRik7XG4gICAgICAgIHRleHQuZW1iZWRGb250cyA9IHRydWU7XG4gICAgICAgIHRleHQuYW50aUFsaWFzVHlwZSA9IEFudGlBbGlhc1R5cGUuQURWQU5DRUQ7XG4gICAgICAgIHRleHQuZ3JpZEZpdFR5cGUgPSBHcmlkRml0VHlwZS5QSVhFTDtcbiAgICAgICAgdGV4dC53aWR0aCA9IDI0MDtcbiAgICAgICAgdGV4dC5oZWlnaHQgPSAxMDA7XG4gICAgICAgIHRleHQuc2VsZWN0YWJsZSA9IGZhbHNlO1xuICAgICAgICB0ZXh0Lm1vdXNlRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB0ZXh0LnRleHQgPSBcIkNsaWNrIGFuZCBkcmFnIC0gcm90YXRlXFxuXCIgK1xuICAgICAgICAgICAgXCJDdXJzb3Iga2V5cyAvIFdTQUQgLyBaU1FEIC0gbW92ZVxcblwiICtcbiAgICAgICAgICAgIFwiU2Nyb2xsIHdoZWVsIC0gem9vbVwiO1xuXG4gICAgICAgIHRleHQuZmlsdGVycyA9IFtuZXcgRHJvcFNoYWRvd0ZpbHRlcigxLCA0NSwgMHgwLCAxLCAwLCAwKV07XG5cbiAgICAgICAgYWRkQ2hpbGQodGV4dCk7XG4gICAgICAgICovXG5cbiAgICAgICAgLy9zZXR1cCB0aGUgbGlnaHRzIGZvciB0aGUgc2NlbmVcbiAgICAgICAgdGhpcy5fbGlnaHQgPSBuZXcgRGlyZWN0aW9uYWxMaWdodCgtMC41LCAtMSwgLTEpO1xuICAgICAgICB0aGlzLl9saWdodC5hbWJpZW50ID0gMC40O1xuICAgICAgICB0aGlzLl9saWdodFBpY2tlciA9IG5ldyBTdGF0aWNMaWdodFBpY2tlcihbdGhpcy5fbGlnaHRdKTtcbiAgICAgICAgdGhpcy5fdmlldy5zY2VuZS5hZGRDaGlsZCh0aGlzLl9saWdodCk7XG5cbiAgICAgICAgLy9zZXR1cCBsaXN0ZW5lcnMgb24gQXNzZXRMaWJyYXJ5XG4gICAgICAgIEFzc2V0TGlicmFyeS5hZGRFdmVudExpc3RlbmVyKEFzc2V0RXZlbnQuQVNTRVRfQ09NUExFVEUsIChldmVudDpBc3NldEV2ZW50KSA9PiB0aGlzLm9uQXNzZXRDb21wbGV0ZShldmVudCkpO1xuICAgICAgICBBc3NldExpYnJhcnkuYWRkRXZlbnRMaXN0ZW5lcihMb2FkZXJFdmVudC5SRVNPVVJDRV9DT01QTEVURSwgKGV2ZW50OkxvYWRlckV2ZW50KSA9PiB0aGlzLm9uUmVzb3VyY2VDb21wbGV0ZShldmVudCkpO1xuXG4gICAgICAgIC8vbG9hZCBwZXJpbGl0aCBrbmlnaHQgdGV4dHVyZXNcbiAgICAgICAgQXNzZXRMaWJyYXJ5LmxvYWQobmV3IFVSTFJlcXVlc3QoXCJhc3NldHMvcGtuaWdodDEucG5nXCIpKTtcbiAgICAgICAgQXNzZXRMaWJyYXJ5LmxvYWQobmV3IFVSTFJlcXVlc3QoXCJhc3NldHMvcGtuaWdodDIucG5nXCIpKTtcbiAgICAgICAgQXNzZXRMaWJyYXJ5LmxvYWQobmV3IFVSTFJlcXVlc3QoXCJhc3NldHMvcGtuaWdodDMucG5nXCIpKTtcbiAgICAgICAgQXNzZXRMaWJyYXJ5LmxvYWQobmV3IFVSTFJlcXVlc3QoXCJhc3NldHMvcGtuaWdodDQucG5nXCIpKTtcblxuICAgICAgICAvL2xvYWQgZmxvb3IgdGV4dHVyZVxuICAgICAgICBBc3NldExpYnJhcnkubG9hZChuZXcgVVJMUmVxdWVzdChcImFzc2V0cy9mbG9vcl9kaWZmdXNlLmpwZ1wiKSk7XG5cbiAgICAgICAgLy9sb2FkIHBlcmVsaXRoIGtuaWdodCBkYXRhXG4gICAgICAgIEFzc2V0TGlicmFyeS5sb2FkKG5ldyBVUkxSZXF1ZXN0KFwiYXNzZXRzL3BrbmlnaHQubWQyXCIpLCBudWxsLCBudWxsLCBuZXcgTUQyUGFyc2VyKCkpO1xuXG4gICAgICAgIC8vY3JlYXRlIGEgZ2xvYmFsIHNoYWRvdyBtYXAgbWV0aG9kXG4gICAgICAgIHRoaXMuX3NoYWRvd01hcE1ldGhvZCA9IG5ldyBTaGFkb3dGaWx0ZXJlZE1ldGhvZCh0aGlzLl9saWdodCk7XG4gICAgICAgIHRoaXMuX3NoYWRvd01hcE1ldGhvZC5lcHNpbG9uID0gMC4yO1xuXG4gICAgICAgIC8vc2V0dXAgZmxvb3IgbWF0ZXJpYWxcbiAgICAgICAgdGhpcy5fZmxvb3JNYXRlcmlhbCA9IG5ldyBUcmlhbmdsZU1ldGhvZE1hdGVyaWFsKCk7XG4gICAgICAgIHRoaXMuX2Zsb29yTWF0ZXJpYWwubGlnaHRQaWNrZXIgPSB0aGlzLl9saWdodFBpY2tlcjtcbiAgICAgICAgdGhpcy5fZmxvb3JNYXRlcmlhbC5zcGVjdWxhciA9IDA7XG4gICAgICAgIHRoaXMuX2Zsb29yTWF0ZXJpYWwuYW1iaWVudCA9IDE7XG4gICAgICAgIHRoaXMuX2Zsb29yTWF0ZXJpYWwuc2hhZG93TWV0aG9kID0gdGhpcy5fc2hhZG93TWFwTWV0aG9kO1xuICAgICAgICB0aGlzLl9mbG9vck1hdGVyaWFsLnJlcGVhdCA9IHRydWU7XG5cbiAgICAgICAgLy9zZXR1cCBrbmlnaHQgbWF0ZXJpYWxzXG4gICAgICAgIGZvciAodmFyIGk6bnVtYmVyIC8qdWludCovICA9IDA7IGkgPCB0aGlzLl9wS25pZ2h0VGV4dHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBrbmlnaHRNYXRlcmlhbDpUcmlhbmdsZU1ldGhvZE1hdGVyaWFsID0gbmV3IFRyaWFuZ2xlTWV0aG9kTWF0ZXJpYWwoKTtcbiAgICAgICAgICAgIC8va25pZ2h0TWF0ZXJpYWwubm9ybWFsTWFwID0gQ2FzdC5iaXRtYXBUZXh0dXJlKEJpdG1hcEZpbHRlckVmZmVjdHMubm9ybWFsTWFwKGJpdG1hcERhdGEpKTtcbiAgICAgICAgICAgIC8va25pZ2h0TWF0ZXJpYWwuc3BlY3VsYXJNYXAgPSBDYXN0LmJpdG1hcFRleHR1cmUoQml0bWFwRmlsdGVyRWZmZWN0cy5vdXRsaW5lKGJpdG1hcERhdGEpKTtcbiAgICAgICAgICAgIGtuaWdodE1hdGVyaWFsLmxpZ2h0UGlja2VyID0gdGhpcy5fbGlnaHRQaWNrZXI7XG4gICAgICAgICAgICBrbmlnaHRNYXRlcmlhbC5nbG9zcyA9IDMwO1xuICAgICAgICAgICAga25pZ2h0TWF0ZXJpYWwuc3BlY3VsYXIgPSAxO1xuICAgICAgICAgICAga25pZ2h0TWF0ZXJpYWwuYW1iaWVudCA9IDE7XG4gICAgICAgICAgICBrbmlnaHRNYXRlcmlhbC5zaGFkb3dNZXRob2QgPSB0aGlzLl9zaGFkb3dNYXBNZXRob2Q7XG4gICAgICAgICAgICB0aGlzLl9wS25pZ2h0TWF0ZXJpYWxzLnB1c2goa25pZ2h0TWF0ZXJpYWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9zZXR1cCB0aGUgZmxvb3JcbiAgICAgICAgdGhpcy5fZmxvb3IgPSA8TWVzaD4gbmV3IFByaW1pdGl2ZVBsYW5lUHJlZmFiKDUwMDAsIDUwMDApLmdldE5ld09iamVjdCgpO1xuICAgICAgICB0aGlzLl9mbG9vci5tYXRlcmlhbCA9IHRoaXMuX2Zsb29yTWF0ZXJpYWw7XG4gICAgICAgIHRoaXMuX2Zsb29yLmdlb21ldHJ5LnNjYWxlVVYoNSwgNSk7XG5cbiAgICAgICAgLy9zZXR1cCB0aGUgc2NlbmVcbiAgICAgICAgdGhpcy5fdmlldy5zY2VuZS5hZGRDaGlsZCh0aGlzLl9mbG9vcik7XG5cbiAgICAgICAgLy9hZGQgc3RhdHMgcGFuZWxcbiAgICAgICAgLy9hZGRDaGlsZChfc3RhdHMgPSBuZXcgQXdheVN0YXRzKF92aWV3KSk7XG5cbiAgICAgICAgLy9hZGQgbGlzdGVuZXJzXG4gICAgICAgIHdpbmRvdy5vbnJlc2l6ZSAgPSAoZXZlbnQ6VUlFdmVudCkgPT4gdGhpcy5vblJlc2l6ZShldmVudCk7XG5cbiAgICAgICAgZG9jdW1lbnQub25tb3VzZWRvd24gPSAoZXZlbnQ6TW91c2VFdmVudCkgPT4gdGhpcy5vbk1vdXNlRG93bihldmVudCk7XG4gICAgICAgIGRvY3VtZW50Lm9ubW91c2V1cCA9IChldmVudDpNb3VzZUV2ZW50KSA9PiB0aGlzLm9uTW91c2VVcChldmVudCk7XG4gICAgICAgIGRvY3VtZW50Lm9ubW91c2Vtb3ZlID0gKGV2ZW50Ok1vdXNlRXZlbnQpID0+IHRoaXMub25Nb3VzZU1vdmUoZXZlbnQpO1xuICAgICAgICBkb2N1bWVudC5vbm1vdXNld2hlZWwgPSAoZXZlbnQ6TW91c2VXaGVlbEV2ZW50KSA9PiB0aGlzLm9uTW91c2VXaGVlbChldmVudCk7XG4gICAgICAgIGRvY3VtZW50Lm9ua2V5ZG93biA9IChldmVudDpLZXlib2FyZEV2ZW50KSA9PiB0aGlzLm9uS2V5RG93bihldmVudCk7XG4gICAgICAgIGRvY3VtZW50Lm9ua2V5dXAgPSAoZXZlbnQ6S2V5Ym9hcmRFdmVudCkgPT4gdGhpcy5vbktleVVwKGV2ZW50KTtcbiAgICAgICAgdGhpcy5vblJlc2l6ZSgpO1xuXG4gICAgICAgIHRoaXMuX3RpbWVyID0gbmV3IFJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLm9uRW50ZXJGcmFtZSwgdGhpcyk7XG4gICAgICAgIHRoaXMuX3RpbWVyLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTmF2aWdhdGlvbiBhbmQgcmVuZGVyIGxvb3BcbiAgICAgKi9cbiAgICBwcml2YXRlIG9uRW50ZXJGcmFtZShkdDpudW1iZXIpOnZvaWRcbiAgICB7XG4gICAgICAgIHRoaXMuX3RpbWUgKz0gZHQ7XG5cbiAgICAgICAgaWYgKHRoaXMuX2tleVVwKVxuICAgICAgICAgICAgdGhpcy5fbG9va0F0UG9zaXRpb24ueCAtPSAxMDtcbiAgICAgICAgaWYgKHRoaXMuX2tleURvd24pXG4gICAgICAgICAgICB0aGlzLl9sb29rQXRQb3NpdGlvbi54ICs9IDEwO1xuICAgICAgICBpZiAodGhpcy5fa2V5TGVmdClcbiAgICAgICAgICAgIHRoaXMuX2xvb2tBdFBvc2l0aW9uLnogLT0gMTA7XG4gICAgICAgIGlmICh0aGlzLl9rZXlSaWdodClcbiAgICAgICAgICAgIHRoaXMuX2xvb2tBdFBvc2l0aW9uLnogKz0gMTA7XG5cbiAgICAgICAgdGhpcy5fY2FtZXJhQ29udHJvbGxlci5sb29rQXRQb3NpdGlvbiA9IHRoaXMuX2xvb2tBdFBvc2l0aW9uO1xuXG4gICAgICAgIHRoaXMuX3ZpZXcucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGlzdGVuZXIgZm9yIGFzc2V0IGNvbXBsZXRlIGV2ZW50IG9uIGxvYWRlclxuICAgICAqL1xuICAgIHByaXZhdGUgb25Bc3NldENvbXBsZXRlKGV2ZW50OkFzc2V0RXZlbnQpOnZvaWRcbiAgICB7XG4gICAgICAgIHZhciBhc3NldDpJQXNzZXQgPSBldmVudC5hc3NldDtcblxuICAgICAgICBzd2l0Y2ggKGFzc2V0LmFzc2V0VHlwZSlcbiAgICAgICAge1xuICAgICAgICAgICAgY2FzZSBBc3NldFR5cGUuTUVTSCA6XG4gICAgICAgICAgICAgICAgdGhpcy5fbWVzaCA9IDxNZXNoPiBldmVudC5hc3NldDtcblxuICAgICAgICAgICAgICAgIC8vYWRqdXN0IHRoZSBtZXNoXG4gICAgICAgICAgICAgICAgdGhpcy5fbWVzaC55ID0gMTIwO1xuICAgICAgICAgICAgICAgIHRoaXMuX21lc2gudHJhbnNmb3JtLnNjYWxlID0gbmV3IFZlY3RvcjNEKDUsIDUsIDUpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fbWVzaEluaXRpYWxpc2VkID0gdHJ1ZTtcblxuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEFzc2V0VHlwZS5BTklNQVRJT05fU0VUIDpcbiAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRpb25TZXQgPSA8VmVydGV4QW5pbWF0aW9uU2V0PiBldmVudC5hc3NldDtcbiAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRpb25TZXRJbml0aWFsaXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHRoaXMuX2FuaW1hdGlvblNldEluaXRpYWxpc2VkICYmIHRoaXMuX21lc2hJbml0aWFsaXNlZCAmJiAhIHRoaXMuX3NjZW5lSW5pdGlhbGlzZWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3NjZW5lSW5pdGlhbGlzZWQgPSB0cnVlO1xuICAgICAgICAgICAgLy9jcmVhdGUgMjAgeCAyMCBkaWZmZXJlbnQgY2xvbmVzIG9mIHRoZSBrbmlnaHRcbiAgICAgICAgICAgIHZhciBudW1XaWRlOm51bWJlciA9IDIwO1xuICAgICAgICAgICAgdmFyIG51bURlZXA6bnVtYmVyID0gMjA7XG4gICAgICAgICAgICB2YXIgazpudW1iZXIgLyp1aW50Ki8gPSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgaTpudW1iZXIgLyp1aW50Ki8gID0gMDsgaSA8IG51bVdpZGU7IGkrKykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGo6bnVtYmVyIC8qdWludCovICA9IDA7IGogPCBudW1EZWVwOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgLy9jbG9uZSBtZXNoXG4gICAgICAgICAgICAgICAgICAgIHZhciBjbG9uZTpNZXNoID0gPE1lc2g+IHRoaXMuX21lc2guY2xvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUueCA9IChpLShudW1XaWRlLTEpLzIpKjUwMDAvbnVtV2lkZTtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUueiA9IChqLShudW1EZWVwLTEpLzIpKjUwMDAvbnVtRGVlcDtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuY2FzdHNTaGFkb3dzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUubWF0ZXJpYWwgPSB0aGlzLl9wS25pZ2h0TWF0ZXJpYWxzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSp0aGlzLl9wS25pZ2h0TWF0ZXJpYWxzLmxlbmd0aCldO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl92aWV3LnNjZW5lLmFkZENoaWxkKGNsb25lKTtcblxuICAgICAgICAgICAgICAgICAgICAvL2NyZWF0ZSBhbmltYXRvclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmVydGV4QW5pbWF0b3I6VmVydGV4QW5pbWF0b3IgPSBuZXcgVmVydGV4QW5pbWF0b3IodGhpcy5fYW5pbWF0aW9uU2V0KTtcblxuICAgICAgICAgICAgICAgICAgICAvL3BsYXkgc3BlY2lmaWVkIHN0YXRlXG4gICAgICAgICAgICAgICAgICAgIHZlcnRleEFuaW1hdG9yLnBsYXkodGhpcy5fYW5pbWF0aW9uU2V0LmFuaW1hdGlvbk5hbWVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSp0aGlzLl9hbmltYXRpb25TZXQuYW5pbWF0aW9uTmFtZXMubGVuZ3RoKV0sIG51bGwsIE1hdGgucmFuZG9tKCkqMTAwMCk7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lLmFuaW1hdG9yID0gdmVydGV4QW5pbWF0b3I7XG4gICAgICAgICAgICAgICAgICAgIGsrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpc3RlbmVyIGZ1bmN0aW9uIGZvciByZXNvdXJjZSBjb21wbGV0ZSBldmVudCBvbiBhc3NldCBsaWJyYXJ5XG4gICAgICovXG4gICAgcHJpdmF0ZSBvblJlc291cmNlQ29tcGxldGUoZXZlbnQ6TG9hZGVyRXZlbnQpXG4gICAge1xuICAgICAgICB2YXIgYXNzZXRzOkFycmF5PElBc3NldD4gPSBldmVudC5hc3NldHM7XG4gICAgICAgIHZhciBsZW5ndGg6bnVtYmVyID0gYXNzZXRzLmxlbmd0aDtcblxuICAgICAgICBmb3IgKCB2YXIgYyA6IG51bWJlciA9IDAgOyBjIDwgbGVuZ3RoIDsgYyArKyApXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBhc3NldDpJQXNzZXQgPSBhc3NldHNbY107XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGFzc2V0Lm5hbWUsIGV2ZW50LnVybCk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQudXJsKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vZmxvb3IgdGV4dHVyZVxuICAgICAgICAgICAgICAgIGNhc2UgXCJhc3NldHMvZmxvb3JfZGlmZnVzZS5qcGdcIiA6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb29yTWF0ZXJpYWwudGV4dHVyZSA9IDxUZXh0dXJlMkRCYXNlPiBhc3NldDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAvL2tuaWdodCB0ZXh0dXJlc1xuICAgICAgICAgICAgICAgIGNhc2UgXCJhc3NldHMvcGtuaWdodDEucG5nXCIgOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJhc3NldHMvcGtuaWdodDIucG5nXCIgOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJhc3NldHMvcGtuaWdodDMucG5nXCIgOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJhc3NldHMvcGtuaWdodDQucG5nXCIgOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wS25pZ2h0TWF0ZXJpYWxzW3RoaXMuX3BLbmlnaHRUZXh0dXJlcy5pbmRleE9mKGV2ZW50LnVybCldLnRleHR1cmUgPSA8VGV4dHVyZTJEQmFzZT4gYXNzZXQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgLy9rbmlnaHQgZGF0YVxuICAgICAgICAgICAgICAgIGNhc2UgXCJhc3NldHMvcGtuaWdodC5tZDJcIiA6XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBLZXkgZG93biBsaXN0ZW5lciBmb3IgYW5pbWF0aW9uXG4gICAgICovXG4gICAgcHJpdmF0ZSBvbktleURvd24oZXZlbnQ6S2V5Ym9hcmRFdmVudCk6dm9pZFxuICAgIHtcbiAgICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgICAgICBjYXNlIEtleWJvYXJkLlVQOlxuICAgICAgICAgICAgY2FzZSBLZXlib2FyZC5XOlxuICAgICAgICAgICAgY2FzZSBLZXlib2FyZC5aOiAvL2ZyXG4gICAgICAgICAgICAgICAgdGhpcy5fa2V5VXAgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBLZXlib2FyZC5ET1dOOlxuICAgICAgICAgICAgY2FzZSBLZXlib2FyZC5TOlxuICAgICAgICAgICAgICAgIHRoaXMuX2tleURvd24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBLZXlib2FyZC5MRUZUOlxuICAgICAgICAgICAgY2FzZSBLZXlib2FyZC5BOlxuICAgICAgICAgICAgY2FzZSBLZXlib2FyZC5ROiAvL2ZyXG4gICAgICAgICAgICAgICAgdGhpcy5fa2V5TGVmdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEtleWJvYXJkLlJJR0hUOlxuICAgICAgICAgICAgY2FzZSBLZXlib2FyZC5EOlxuICAgICAgICAgICAgICAgIHRoaXMuX2tleVJpZ2h0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEtleSB1cCBsaXN0ZW5lclxuICAgICAqL1xuICAgIHByaXZhdGUgb25LZXlVcChldmVudDpLZXlib2FyZEV2ZW50KTp2b2lkXG4gICAge1xuICAgICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgICAgIGNhc2UgS2V5Ym9hcmQuVVA6XG4gICAgICAgICAgICBjYXNlIEtleWJvYXJkLlc6XG4gICAgICAgICAgICBjYXNlIEtleWJvYXJkLlo6IC8vZnJcbiAgICAgICAgICAgICAgICB0aGlzLl9rZXlVcCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBLZXlib2FyZC5ET1dOOlxuICAgICAgICAgICAgY2FzZSBLZXlib2FyZC5TOlxuICAgICAgICAgICAgICAgIHRoaXMuX2tleURvd24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgS2V5Ym9hcmQuTEVGVDpcbiAgICAgICAgICAgIGNhc2UgS2V5Ym9hcmQuQTpcbiAgICAgICAgICAgIGNhc2UgS2V5Ym9hcmQuUTogLy9mclxuICAgICAgICAgICAgICAgIHRoaXMuX2tleUxlZnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgS2V5Ym9hcmQuUklHSFQ6XG4gICAgICAgICAgICBjYXNlIEtleWJvYXJkLkQ6XG4gICAgICAgICAgICAgICAgdGhpcy5fa2V5UmlnaHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1vdXNlIGRvd24gbGlzdGVuZXIgZm9yIG5hdmlnYXRpb25cbiAgICAgKi9cbiAgICBwcml2YXRlIG9uTW91c2VEb3duKGV2ZW50Ok1vdXNlRXZlbnQpOnZvaWRcbiAgICB7XG4gICAgICAgIHRoaXMuX2xhc3RQYW5BbmdsZSA9IHRoaXMuX2NhbWVyYUNvbnRyb2xsZXIucGFuQW5nbGU7XG4gICAgICAgIHRoaXMuX2xhc3RUaWx0QW5nbGUgPSB0aGlzLl9jYW1lcmFDb250cm9sbGVyLnRpbHRBbmdsZTtcbiAgICAgICAgdGhpcy5fbGFzdE1vdXNlWCA9IGV2ZW50LmNsaWVudFg7XG4gICAgICAgIHRoaXMuX2xhc3RNb3VzZVkgPSBldmVudC5jbGllbnRZO1xuICAgICAgICB0aGlzLl9tb3ZlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNb3VzZSB1cCBsaXN0ZW5lciBmb3IgbmF2aWdhdGlvblxuICAgICAqL1xuICAgIHByaXZhdGUgb25Nb3VzZVVwKGV2ZW50Ok1vdXNlRXZlbnQpOnZvaWRcbiAgICB7XG4gICAgICAgIHRoaXMuX21vdmUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uTW91c2VNb3ZlKGV2ZW50Ok1vdXNlRXZlbnQpXG4gICAge1xuICAgICAgICBpZiAodGhpcy5fbW92ZSkge1xuICAgICAgICAgICAgdGhpcy5fY2FtZXJhQ29udHJvbGxlci5wYW5BbmdsZSA9IDAuMyooZXZlbnQuY2xpZW50WCAtIHRoaXMuX2xhc3RNb3VzZVgpICsgdGhpcy5fbGFzdFBhbkFuZ2xlO1xuICAgICAgICAgICAgdGhpcy5fY2FtZXJhQ29udHJvbGxlci50aWx0QW5nbGUgPSAwLjMqKGV2ZW50LmNsaWVudFkgLSB0aGlzLl9sYXN0TW91c2VZKSArIHRoaXMuX2xhc3RUaWx0QW5nbGU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNb3VzZSB3aGVlbCBsaXN0ZW5lciBmb3IgbmF2aWdhdGlvblxuICAgICAqL1xuICAgIHByaXZhdGUgb25Nb3VzZVdoZWVsKGV2ZW50Ok1vdXNlV2hlZWxFdmVudCk6dm9pZFxuICAgIHtcbiAgICAgICAgdGhpcy5fY2FtZXJhQ29udHJvbGxlci5kaXN0YW5jZSAtPSBldmVudC53aGVlbERlbHRhO1xuXG4gICAgICAgIGlmICh0aGlzLl9jYW1lcmFDb250cm9sbGVyLmRpc3RhbmNlIDwgMTAwKVxuICAgICAgICAgICAgdGhpcy5fY2FtZXJhQ29udHJvbGxlci5kaXN0YW5jZSA9IDEwMDtcbiAgICAgICAgZWxzZSBpZiAodGhpcy5fY2FtZXJhQ29udHJvbGxlci5kaXN0YW5jZSA+IDIwMDApXG4gICAgICAgICAgICB0aGlzLl9jYW1lcmFDb250cm9sbGVyLmRpc3RhbmNlID0gMjAwMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGFnZSBsaXN0ZW5lciBmb3IgcmVzaXplIGV2ZW50c1xuICAgICAqL1xuICAgIHByaXZhdGUgb25SZXNpemUoZXZlbnQ6VUlFdmVudCA9IG51bGwpOnZvaWRcbiAgICB7XG4gICAgICAgIHRoaXMuX3ZpZXcueSA9IDA7XG4gICAgICAgIHRoaXMuX3ZpZXcueCA9IDA7XG4gICAgICAgIHRoaXMuX3ZpZXcud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgdGhpcy5fdmlldy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgfVxufVxuXG53aW5kb3cub25sb2FkID0gZnVuY3Rpb24gKClcbntcbiAgICBuZXcgSW50ZXJtZWRpYXRlX1BlcmVsaXRoS25pZ2h0KCk7XG59Il19