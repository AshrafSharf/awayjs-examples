/*

AWD file loading example in Away3d

Demonstrates:

How to use the Loader object to load an embedded internal awd model.

Code by Rob Bateman
rob@infiniteturtles.co.uk
http://www.infiniteturtles.co.uk

This code is distributed under the MIT License

Copyright (c) The Away Foundation http://www.theawayfoundation.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the “Software”), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
var Loader = require("awayjs-core/lib/containers/Loader");
var View = require("awayjs-core/lib/containers/View");
var HoverController = require("awayjs-core/lib/controllers/HoverController");
var AssetEvent = require("awayjs-core/lib/events/AssetEvent");
var Vector3D = require("awayjs-core/lib/core/geom/Vector3D");
var AssetLibrary = require("awayjs-core/lib/core/library/AssetLibrary");
var AssetType = require("awayjs-core/lib/core/library/AssetType");
var URLRequest = require("awayjs-core/lib/core/net/URLRequest");
var Keyboard = require("awayjs-core/lib/core/ui/Keyboard");
var PerspectiveProjection = require("awayjs-core/lib/projections/PerspectiveProjection");
var DefaultRenderer = require("awayjs-stagegl/lib/core/render/DefaultRenderer");
var RequestAnimationFrame = require("awayjs-core/lib/utils/RequestAnimationFrame");
var CrossfadeTransition = require("awayjs-renderergl/lib/animators/transitions/CrossfadeTransition");
var AnimationStateEvent = require("awayjs-renderergl/lib/events/AnimationStateEvent");
var AWDParser = require("awayjs-renderergl/lib/parsers/AWDParser");
var Intermediate_AWDViewer = (function () {
    /**
     * Constructor
     */
    function Intermediate_AWDViewer() {
        this._time = 0;
        this._stateTransition = new CrossfadeTransition(0.5);
        this.init();
    }
    /**
     * Global initialise function
     */
    Intermediate_AWDViewer.prototype.init = function () {
        this.initEngine();
        this.initObjects();
        this.initListeners();
    };
    /**
     * Initialise the engine
     */
    Intermediate_AWDViewer.prototype.initEngine = function () {
        //create the view
        this._view = new View(new DefaultRenderer());
        this._view.backgroundColor = 0x333338;
        //create custom lens
        this._view.camera.projection = new PerspectiveProjection(70);
        this._view.camera.projection.far = 5000;
        this._view.camera.projection.near = 1;
        //setup controller to be used on the camera
        this._cameraController = new HoverController(this._view.camera, null, 0, 0, 150, 10, 90);
        this._cameraController.lookAtPosition = new Vector3D(0, 60, 0);
        this._cameraController.tiltAngle = 0;
        this._cameraController.panAngle = 0;
        this._cameraController.minTiltAngle = 5;
        this._cameraController.maxTiltAngle = 60;
        this._cameraController.autoUpdate = false;
    };
    /**
     * Initialise the scene objects
     */
    Intermediate_AWDViewer.prototype.initObjects = function () {
        var _this = this;
        AssetLibrary.enableParser(AWDParser);
        //kickoff asset loading
        var loader = new Loader();
        loader.addEventListener(AssetEvent.ASSET_COMPLETE, function (event) { return _this.onAssetComplete(event); });
        loader.load(new URLRequest("assets/shambler.awd"));
        this._view.scene.addChild(loader);
    };
    /**
     * Initialise the listeners
     */
    Intermediate_AWDViewer.prototype.initListeners = function () {
        var _this = this;
        window.onresize = function (event) { return _this.onResize(event); };
        document.onmousedown = function (event) { return _this.onMouseDown(event); };
        document.onmouseup = function (event) { return _this.onMouseUp(event); };
        document.onmousemove = function (event) { return _this.onMouseMove(event); };
        document.onmousewheel = function (event) { return _this.onMouseWheel(event); };
        document.onkeydown = function (event) { return _this.onKeyDown(event); };
        this.onResize();
        this._timer = new RequestAnimationFrame(this.onEnterFrame, this);
        this._timer.start();
    };
    /**
     * loader listener for asset complete events
     */
    Intermediate_AWDViewer.prototype.onAssetComplete = function (event) {
        var _this = this;
        if (event.asset.assetType == AssetType.ANIMATOR) {
            this._animator = event.asset;
            this._animator.play(Intermediate_AWDViewer.IDLE_NAME);
        }
        else if (event.asset.assetType == AssetType.ANIMATION_NODE) {
            console.log(event.asset.name);
            var node = event.asset;
            if (node.name == Intermediate_AWDViewer.IDLE_NAME) {
                node.looping = true;
            }
            else {
                node.looping = false;
                node.addEventListener(AnimationStateEvent.PLAYBACK_COMPLETE, function (event) { return _this.onPlaybackComplete(event); });
            }
        }
    };
    /**
     * Key down listener for animation
     */
    Intermediate_AWDViewer.prototype.onKeyDown = function (event) {
        switch (event.keyCode) {
            case Keyboard.NUMBER_1:
                this.playAction("attack01");
                break;
            case Keyboard.NUMBER_2:
                this.playAction("attack02");
                break;
            case Keyboard.NUMBER_3:
                this.playAction("attack03");
                break;
            case Keyboard.NUMBER_4:
                this.playAction("attack04");
                break;
            case Keyboard.NUMBER_5:
                this.playAction("attack05");
        }
    };
    Intermediate_AWDViewer.prototype.playAction = function (name) {
        this._animator.play(name, this._stateTransition, 0);
    };
    Intermediate_AWDViewer.prototype.onPlaybackComplete = function (event) {
        if (this._animator.activeState != event.animationState)
            return;
        this._animator.play(Intermediate_AWDViewer.IDLE_NAME, this._stateTransition);
    };
    /**
     * Render loop
     */
    Intermediate_AWDViewer.prototype.onEnterFrame = function (dt) {
        this._time += dt;
        //update camera controler
        this._cameraController.update();
        //update view
        this._view.render();
    };
    /**
     * Mouse down listener for navigation
     */
    Intermediate_AWDViewer.prototype.onMouseDown = function (event) {
        this._lastPanAngle = this._cameraController.panAngle;
        this._lastTiltAngle = this._cameraController.tiltAngle;
        this._lastMouseX = event.clientX;
        this._lastMouseY = event.clientY;
        this._move = true;
    };
    /**
     * Mouse up listener for navigation
     */
    Intermediate_AWDViewer.prototype.onMouseUp = function (event) {
        this._move = false;
    };
    Intermediate_AWDViewer.prototype.onMouseMove = function (event) {
        if (this._move) {
            this._cameraController.panAngle = 0.3 * (event.clientX - this._lastMouseX) + this._lastPanAngle;
            this._cameraController.tiltAngle = 0.3 * (event.clientY - this._lastMouseY) + this._lastTiltAngle;
        }
    };
    /**
     * Mouse wheel listener for navigation
     */
    Intermediate_AWDViewer.prototype.onMouseWheel = function (event) {
        this._cameraController.distance -= event.wheelDelta * 5;
        if (this._cameraController.distance < 100)
            this._cameraController.distance = 100;
        else if (this._cameraController.distance > 2000)
            this._cameraController.distance = 2000;
    };
    /**
     * window listener for resize events
     */
    Intermediate_AWDViewer.prototype.onResize = function (event) {
        if (event === void 0) { event = null; }
        this._view.y = 0;
        this._view.x = 0;
        this._view.width = window.innerWidth;
        this._view.height = window.innerHeight;
    };
    Intermediate_AWDViewer.IDLE_NAME = "idle";
    return Intermediate_AWDViewer;
})();
window.onload = function () {
    new Intermediate_AWDViewer();
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9JbnRlcm1lZGlhdGVfQVdEVmlld2VyLnRzIl0sIm5hbWVzIjpbIkludGVybWVkaWF0ZV9BV0RWaWV3ZXIiLCJJbnRlcm1lZGlhdGVfQVdEVmlld2VyLmNvbnN0cnVjdG9yIiwiSW50ZXJtZWRpYXRlX0FXRFZpZXdlci5pbml0IiwiSW50ZXJtZWRpYXRlX0FXRFZpZXdlci5pbml0RW5naW5lIiwiSW50ZXJtZWRpYXRlX0FXRFZpZXdlci5pbml0T2JqZWN0cyIsIkludGVybWVkaWF0ZV9BV0RWaWV3ZXIuaW5pdExpc3RlbmVycyIsIkludGVybWVkaWF0ZV9BV0RWaWV3ZXIub25Bc3NldENvbXBsZXRlIiwiSW50ZXJtZWRpYXRlX0FXRFZpZXdlci5vbktleURvd24iLCJJbnRlcm1lZGlhdGVfQVdEVmlld2VyLnBsYXlBY3Rpb24iLCJJbnRlcm1lZGlhdGVfQVdEVmlld2VyLm9uUGxheWJhY2tDb21wbGV0ZSIsIkludGVybWVkaWF0ZV9BV0RWaWV3ZXIub25FbnRlckZyYW1lIiwiSW50ZXJtZWRpYXRlX0FXRFZpZXdlci5vbk1vdXNlRG93biIsIkludGVybWVkaWF0ZV9BV0RWaWV3ZXIub25Nb3VzZVVwIiwiSW50ZXJtZWRpYXRlX0FXRFZpZXdlci5vbk1vdXNlTW92ZSIsIkludGVybWVkaWF0ZV9BV0RWaWV3ZXIub25Nb3VzZVdoZWVsIiwiSW50ZXJtZWRpYXRlX0FXRFZpZXdlci5vblJlc2l6ZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFrQ0U7QUFFRixJQUFPLE1BQU0sV0FBZ0IsbUNBQW1DLENBQUMsQ0FBQztBQUNsRSxJQUFPLElBQUksV0FBaUIsaUNBQWlDLENBQUMsQ0FBQztBQUMvRCxJQUFPLGVBQWUsV0FBYyw2Q0FBNkMsQ0FBQyxDQUFDO0FBQ25GLElBQU8sVUFBVSxXQUFlLG1DQUFtQyxDQUFDLENBQUM7QUFDckUsSUFBTyxRQUFRLFdBQWdCLG9DQUFvQyxDQUFDLENBQUM7QUFDckUs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QUNBLENBQUNBO1FBRXhEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxpQkFBaUJBLENBQUNBLFFBQVFBLEdBQUdBLEdBQUdBLENBQUNBO1lBQ3pDQSxJQUFJQSxDQUFDQSxpQkFBaUJBLENBQUNBLFFBQVFBLEdBQUdBLEdBQUdBLENBQUNBO1FBQ3ZDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxpQkFBaUJBLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBO1lBQy9DQSxJQUFJQSxDQUFDQSxpQkFBaUJBLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBO0lBQ3pDQSxDQUFDQTtJQUVEZDs7T0FFR0E7SUFDS0EseUNBQVFBLEdBQWhCQSxVQUFpQkEsS0FBWUE7UUFBWmUscUJBQVlBLEdBQVpBLFlBQVlBO1FBRTVCQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxHQUFXQSxDQUFDQSxDQUFDQTtRQUN6QkEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsR0FBV0EsQ0FBQ0EsQ0FBQ0E7UUFDekJBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLEtBQUtBLEdBQU9BLE1BQU1BLENBQUNBLFVBQVVBLENBQUNBO1FBQ3pDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxHQUFNQSxNQUFNQSxDQUFDQSxXQUFXQSxDQUFDQTtJQUMzQ0EsQ0FBQ0E7SUExTWNmLGdDQUFTQSxHQUFVQSxNQUFNQSxDQUFDQTtJQTJNMUNBLDZCQUFDQTtBQUFEQSxDQTdOQSxBQTZOQ0EsSUFBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLEdBQUc7SUFFZixJQUFJLHNCQUFzQixFQUFFLENBQUM7QUFDOUIsQ0FBQyxDQUFBIiwiZmlsZSI6IkludGVybWVkaWF0ZV9BV0RWaWV3ZXIuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXG5BV0QgZmlsZSBsb2FkaW5nIGV4YW1wbGUgaW4gQXdheTNkXG5cbkRlbW9uc3RyYXRlczpcblxuSG93IHRvIHVzZSB0aGUgTG9hZGVyIG9iamVjdCB0byBsb2FkIGFuIGVtYmVkZGVkIGludGVybmFsIGF3ZCBtb2RlbC5cblxuQ29kZSBieSBSb2IgQmF0ZW1hblxucm9iQGluZmluaXRldHVydGxlcy5jby51a1xuaHR0cDovL3d3dy5pbmZpbml0ZXR1cnRsZXMuY28udWtcblxuVGhpcyBjb2RlIGlzIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIFRoZSBBd2F5IEZvdW5kYXRpb24gaHR0cDovL3d3dy50aGVhd2F5Zm91bmRhdGlvbi5vcmdcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUg4oCcU29mdHdhcmXigJ0pLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIOKAnEFTIElT4oCdLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS5cblxuKi9cblxuaW1wb3J0IExvYWRlclx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb250YWluZXJzL0xvYWRlclwiKTtcbmltcG9ydCBWaWV3XHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvY29udGFpbmVycy9WaWV3XCIpO1xuaW1wb3J0IEhvdmVyQ29udHJvbGxlclx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2NvbnRyb2xsZXJzL0hvdmVyQ29udHJvbGxlclwiKTtcbmltcG9ydCBBc3NldEV2ZW50XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9ldmVudHMvQXNzZXRFdmVudFwiKTtcbmltcG9ydCBWZWN0b3IzRFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb3JlL2dlb20vVmVjdG9yM0RcIik7XG5pbXBvcnQgQXNzZXRMaWJyYXJ5XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb3JlL2xpYnJhcnkvQXNzZXRMaWJyYXJ5XCIpO1xuaW1wb3J0IEFzc2V0VHlwZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvY29yZS9saWJyYXJ5L0Fzc2V0VHlwZVwiKTtcbmltcG9ydCBVUkxSZXF1ZXN0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb3JlL25ldC9VUkxSZXF1ZXN0XCIpO1xuaW1wb3J0IEtleWJvYXJkXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2NvcmUvdWkvS2V5Ym9hcmRcIik7XG5pbXBvcnQgUGVyc3BlY3RpdmVQcm9qZWN0aW9uXHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9wcm9qZWN0aW9ucy9QZXJzcGVjdGl2ZVByb2plY3Rpb25cIik7XG5pbXBvcnQgRGVmYXVsdFJlbmRlcmVyXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvY29yZS9yZW5kZXIvRGVmYXVsdFJlbmRlcmVyXCIpO1xuaW1wb3J0IFJlcXVlc3RBbmltYXRpb25GcmFtZVx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdXRpbHMvUmVxdWVzdEFuaW1hdGlvbkZyYW1lXCIpO1xuXG5pbXBvcnQgU2tlbGV0b25BbmltYXRvclx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9Ta2VsZXRvbkFuaW1hdG9yXCIpO1xuaW1wb3J0IFNrZWxldG9uQ2xpcE5vZGVcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvbm9kZXMvU2tlbGV0b25DbGlwTm9kZVwiKTtcbmltcG9ydCBDcm9zc2ZhZGVUcmFuc2l0aW9uXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy90cmFuc2l0aW9ucy9Dcm9zc2ZhZGVUcmFuc2l0aW9uXCIpO1xuaW1wb3J0IEFuaW1hdGlvblN0YXRlRXZlbnRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvZXZlbnRzL0FuaW1hdGlvblN0YXRlRXZlbnRcIik7XG5pbXBvcnQgQVdEUGFyc2VyXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wYXJzZXJzL0FXRFBhcnNlclwiKTtcblxuY2xhc3MgSW50ZXJtZWRpYXRlX0FXRFZpZXdlclxue1xuXHRcblx0Ly9lbmdpbmUgdmFyaWFibGVzXG5cdHByaXZhdGUgX3ZpZXc6Vmlldztcblx0cHJpdmF0ZSBfY2FtZXJhQ29udHJvbGxlcjpIb3ZlckNvbnRyb2xsZXI7XG5cdHByaXZhdGUgX2FuaW1hdG9yOlNrZWxldG9uQW5pbWF0b3I7XG5cblx0cHJpdmF0ZSBfdGltZXI6UmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuXHRwcml2YXRlIF90aW1lOm51bWJlciA9IDA7XG5cblx0Ly9uYXZpZ2F0aW9uXG5cdHByaXZhdGUgX2xhc3RQYW5BbmdsZTpudW1iZXI7XG5cdHByaXZhdGUgX2xhc3RUaWx0QW5nbGU6bnVtYmVyO1xuXHRwcml2YXRlIF9sYXN0TW91c2VYOm51bWJlcjtcblx0cHJpdmF0ZSBfbGFzdE1vdXNlWTpudW1iZXI7XG5cdHByaXZhdGUgX21vdmU6Ym9vbGVhbjtcblx0cHJpdmF0ZSBfc3RhdGVUcmFuc2l0aW9uOkNyb3NzZmFkZVRyYW5zaXRpb24gPSBuZXcgQ3Jvc3NmYWRlVHJhbnNpdGlvbigwLjUpO1xuXHRwcml2YXRlIHN0YXRpYyBJRExFX05BTUU6c3RyaW5nID0gXCJpZGxlXCI7XG5cdFxuXHQvKipcblx0ICogQ29uc3RydWN0b3Jcblx0ICovXG5cdGNvbnN0cnVjdG9yKClcblx0e1xuXHRcdHRoaXMuaW5pdCgpO1xuXHR9XG5cdFxuXHQvKipcblx0ICogR2xvYmFsIGluaXRpYWxpc2UgZnVuY3Rpb25cblx0ICovXG5cdHByaXZhdGUgaW5pdCgpOnZvaWRcblx0e1xuXHRcdHRoaXMuaW5pdEVuZ2luZSgpO1xuXHRcdHRoaXMuaW5pdE9iamVjdHMoKTtcblx0XHR0aGlzLmluaXRMaXN0ZW5lcnMoKTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIEluaXRpYWxpc2UgdGhlIGVuZ2luZVxuXHQgKi9cblx0cHJpdmF0ZSBpbml0RW5naW5lKCk6dm9pZFxuXHR7XG5cdFx0Ly9jcmVhdGUgdGhlIHZpZXdcblx0XHR0aGlzLl92aWV3ID0gbmV3IFZpZXcobmV3IERlZmF1bHRSZW5kZXJlcigpKTtcblx0XHR0aGlzLl92aWV3LmJhY2tncm91bmRDb2xvciA9IDB4MzMzMzM4O1xuXHRcdFxuXHRcdC8vY3JlYXRlIGN1c3RvbSBsZW5zXG5cdFx0dGhpcy5fdmlldy5jYW1lcmEucHJvamVjdGlvbiA9IG5ldyBQZXJzcGVjdGl2ZVByb2plY3Rpb24oNzApO1xuXHRcdHRoaXMuX3ZpZXcuY2FtZXJhLnByb2plY3Rpb24uZmFyID0gNTAwMDtcblx0XHR0aGlzLl92aWV3LmNhbWVyYS5wcm9qZWN0aW9uLm5lYXIgPSAxO1xuXHRcdFxuXHRcdC8vc2V0dXAgY29udHJvbGxlciB0byBiZSB1c2VkIG9uIHRoZSBjYW1lcmFcblx0XHR0aGlzLl9jYW1lcmFDb250cm9sbGVyID0gbmV3IEhvdmVyQ29udHJvbGxlcih0aGlzLl92aWV3LmNhbWVyYSwgbnVsbCwgMCwgMCwgMTUwLCAxMCwgOTApO1xuXHRcdHRoaXMuX2NhbWVyYUNvbnRyb2xsZXIubG9va0F0UG9zaXRpb24gPSBuZXcgVmVjdG9yM0QoMCw2MCwgMCk7XG5cdFx0dGhpcy5fY2FtZXJhQ29udHJvbGxlci50aWx0QW5nbGUgPSAwO1xuXHRcdHRoaXMuX2NhbWVyYUNvbnRyb2xsZXIucGFuQW5nbGUgPSAwO1xuXHRcdHRoaXMuX2NhbWVyYUNvbnRyb2xsZXIubWluVGlsdEFuZ2xlID0gNTtcblx0XHR0aGlzLl9jYW1lcmFDb250cm9sbGVyLm1heFRpbHRBbmdsZSA9IDYwO1xuXHRcdHRoaXMuX2NhbWVyYUNvbnRyb2xsZXIuYXV0b1VwZGF0ZSA9IGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEluaXRpYWxpc2UgdGhlIHNjZW5lIG9iamVjdHNcblx0ICovXG5cdHByaXZhdGUgaW5pdE9iamVjdHMoKTp2b2lkXG5cdHtcblx0XHRBc3NldExpYnJhcnkuZW5hYmxlUGFyc2VyKEFXRFBhcnNlcik7XG5cblx0XHQvL2tpY2tvZmYgYXNzZXQgbG9hZGluZ1xuXHRcdHZhciBsb2FkZXI6TG9hZGVyID0gbmV3IExvYWRlcigpO1xuXHRcdGxvYWRlci5hZGRFdmVudExpc3RlbmVyKEFzc2V0RXZlbnQuQVNTRVRfQ09NUExFVEUsIChldmVudDpBc3NldEV2ZW50KSA9PiB0aGlzLm9uQXNzZXRDb21wbGV0ZShldmVudCkpO1xuXG5cdFx0bG9hZGVyLmxvYWQobmV3IFVSTFJlcXVlc3QoXCJhc3NldHMvc2hhbWJsZXIuYXdkXCIpKTtcblxuXHRcdHRoaXMuX3ZpZXcuc2NlbmUuYWRkQ2hpbGQobG9hZGVyKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBJbml0aWFsaXNlIHRoZSBsaXN0ZW5lcnNcblx0ICovXG5cdHByaXZhdGUgaW5pdExpc3RlbmVycygpOnZvaWRcblx0e1xuXHRcdHdpbmRvdy5vbnJlc2l6ZSAgPSAoZXZlbnQpID0+IHRoaXMub25SZXNpemUoZXZlbnQpO1xuXG5cdFx0ZG9jdW1lbnQub25tb3VzZWRvd24gPSAoZXZlbnQpID0+IHRoaXMub25Nb3VzZURvd24oZXZlbnQpO1xuXHRcdGRvY3VtZW50Lm9ubW91c2V1cCA9IChldmVudCkgPT4gdGhpcy5vbk1vdXNlVXAoZXZlbnQpO1xuXHRcdGRvY3VtZW50Lm9ubW91c2Vtb3ZlID0gKGV2ZW50KSA9PiB0aGlzLm9uTW91c2VNb3ZlKGV2ZW50KTtcblx0XHRkb2N1bWVudC5vbm1vdXNld2hlZWwgPSAoZXZlbnQpID0+IHRoaXMub25Nb3VzZVdoZWVsKGV2ZW50KTtcblx0XHRkb2N1bWVudC5vbmtleWRvd24gPSAoZXZlbnQpID0+IHRoaXMub25LZXlEb3duKGV2ZW50KTtcblxuXHRcdHRoaXMub25SZXNpemUoKTtcblxuXHRcdHRoaXMuX3RpbWVyID0gbmV3IFJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLm9uRW50ZXJGcmFtZSwgdGhpcyk7XG5cdFx0dGhpcy5fdGltZXIuc3RhcnQoKTtcblxuXHR9XG5cdFxuXHQvKipcblx0ICogbG9hZGVyIGxpc3RlbmVyIGZvciBhc3NldCBjb21wbGV0ZSBldmVudHNcblx0ICovXHRcdFxuXHRwcml2YXRlIG9uQXNzZXRDb21wbGV0ZShldmVudDpBc3NldEV2ZW50KTp2b2lkXG5cdHtcblx0XHRpZiAoZXZlbnQuYXNzZXQuYXNzZXRUeXBlID09IEFzc2V0VHlwZS5BTklNQVRPUikge1xuXHRcdFx0dGhpcy5fYW5pbWF0b3IgPSA8U2tlbGV0b25BbmltYXRvcj4gZXZlbnQuYXNzZXQ7XG5cdFx0XHR0aGlzLl9hbmltYXRvci5wbGF5KEludGVybWVkaWF0ZV9BV0RWaWV3ZXIuSURMRV9OQU1FKTtcblx0XHR9IGVsc2UgaWYgKGV2ZW50LmFzc2V0LmFzc2V0VHlwZSA9PSBBc3NldFR5cGUuQU5JTUFUSU9OX05PREUpIHtcblx0XHRcdGNvbnNvbGUubG9nKGV2ZW50LmFzc2V0Lm5hbWUpO1xuXHRcdFx0dmFyIG5vZGU6U2tlbGV0b25DbGlwTm9kZSA9IDxTa2VsZXRvbkNsaXBOb2RlPiBldmVudC5hc3NldDtcblx0XHRcdFxuXHRcdFx0aWYgKG5vZGUubmFtZSA9PSBJbnRlcm1lZGlhdGVfQVdEVmlld2VyLklETEVfTkFNRSkge1xuXHRcdFx0XHRub2RlLmxvb3BpbmcgPSB0cnVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bm9kZS5sb29waW5nID0gZmFsc2U7XG5cdFx0XHRcdG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihBbmltYXRpb25TdGF0ZUV2ZW50LlBMQVlCQUNLX0NPTVBMRVRFLCAoZXZlbnQ6QW5pbWF0aW9uU3RhdGVFdmVudCkgPT4gdGhpcy5vblBsYXliYWNrQ29tcGxldGUoZXZlbnQpKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBLZXkgZG93biBsaXN0ZW5lciBmb3IgYW5pbWF0aW9uXG5cdCAqL1xuXHRwcml2YXRlIG9uS2V5RG93bihldmVudDpLZXlib2FyZEV2ZW50KTp2b2lkXG5cdHtcblx0XHRzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcblx0XHRcdGNhc2UgS2V5Ym9hcmQuTlVNQkVSXzE6XG5cdFx0XHRcdHRoaXMucGxheUFjdGlvbihcImF0dGFjazAxXCIpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgS2V5Ym9hcmQuTlVNQkVSXzI6XG5cdFx0XHRcdHRoaXMucGxheUFjdGlvbihcImF0dGFjazAyXCIpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgS2V5Ym9hcmQuTlVNQkVSXzM6XG5cdFx0XHRcdHRoaXMucGxheUFjdGlvbihcImF0dGFjazAzXCIpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgS2V5Ym9hcmQuTlVNQkVSXzQ6XG5cdFx0XHRcdHRoaXMucGxheUFjdGlvbihcImF0dGFjazA0XCIpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgS2V5Ym9hcmQuTlVNQkVSXzU6XG5cdFx0XHRcdHRoaXMucGxheUFjdGlvbihcImF0dGFjazA1XCIpO1xuXHRcdH1cblx0fVxuXHRcblx0cHJpdmF0ZSBwbGF5QWN0aW9uKG5hbWU6c3RyaW5nKTp2b2lkXG5cdHtcblx0XHR0aGlzLl9hbmltYXRvci5wbGF5KG5hbWUsIHRoaXMuX3N0YXRlVHJhbnNpdGlvbiwgMCk7XG5cdH1cblx0XG5cdHByaXZhdGUgb25QbGF5YmFja0NvbXBsZXRlKGV2ZW50OkFuaW1hdGlvblN0YXRlRXZlbnQpOnZvaWRcblx0e1xuXHRcdGlmICh0aGlzLl9hbmltYXRvci5hY3RpdmVTdGF0ZSAhPSBldmVudC5hbmltYXRpb25TdGF0ZSlcblx0XHRcdHJldHVybjtcblxuXHRcdHRoaXMuX2FuaW1hdG9yLnBsYXkoSW50ZXJtZWRpYXRlX0FXRFZpZXdlci5JRExFX05BTUUsIHRoaXMuX3N0YXRlVHJhbnNpdGlvbik7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBSZW5kZXIgbG9vcFxuXHQgKi9cblx0cHJpdmF0ZSBvbkVudGVyRnJhbWUoZHQ6bnVtYmVyKTp2b2lkXG5cdHtcblx0XHR0aGlzLl90aW1lICs9IGR0O1xuXHRcdFxuXHRcdC8vdXBkYXRlIGNhbWVyYSBjb250cm9sZXJcblx0XHR0aGlzLl9jYW1lcmFDb250cm9sbGVyLnVwZGF0ZSgpO1xuXHRcblx0XHRcblx0XHQvL3VwZGF0ZSB2aWV3XG5cdFx0dGhpcy5fdmlldy5yZW5kZXIoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBNb3VzZSBkb3duIGxpc3RlbmVyIGZvciBuYXZpZ2F0aW9uXG5cdCAqL1xuXHRwcml2YXRlIG9uTW91c2VEb3duKGV2ZW50KTp2b2lkXG5cdHtcblx0XHR0aGlzLl9sYXN0UGFuQW5nbGUgPSB0aGlzLl9jYW1lcmFDb250cm9sbGVyLnBhbkFuZ2xlO1xuXHRcdHRoaXMuX2xhc3RUaWx0QW5nbGUgPSB0aGlzLl9jYW1lcmFDb250cm9sbGVyLnRpbHRBbmdsZTtcblx0XHR0aGlzLl9sYXN0TW91c2VYID0gZXZlbnQuY2xpZW50WDtcblx0XHR0aGlzLl9sYXN0TW91c2VZID0gZXZlbnQuY2xpZW50WTtcblx0XHR0aGlzLl9tb3ZlID0gdHJ1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBNb3VzZSB1cCBsaXN0ZW5lciBmb3IgbmF2aWdhdGlvblxuXHQgKi9cblx0cHJpdmF0ZSBvbk1vdXNlVXAoZXZlbnQpOnZvaWRcblx0e1xuXHRcdHRoaXMuX21vdmUgPSBmYWxzZTtcblx0fVxuXG5cdHByaXZhdGUgb25Nb3VzZU1vdmUoZXZlbnQpXG5cdHtcblx0XHRpZiAodGhpcy5fbW92ZSkge1xuXHRcdFx0dGhpcy5fY2FtZXJhQ29udHJvbGxlci5wYW5BbmdsZSA9IDAuMyooZXZlbnQuY2xpZW50WCAtIHRoaXMuX2xhc3RNb3VzZVgpICsgdGhpcy5fbGFzdFBhbkFuZ2xlO1xuXHRcdFx0dGhpcy5fY2FtZXJhQ29udHJvbGxlci50aWx0QW5nbGUgPSAwLjMqKGV2ZW50LmNsaWVudFkgLSB0aGlzLl9sYXN0TW91c2VZKSArIHRoaXMuX2xhc3RUaWx0QW5nbGU7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIE1vdXNlIHdoZWVsIGxpc3RlbmVyIGZvciBuYXZpZ2F0aW9uXG5cdCAqL1xuXHRwcml2YXRlIG9uTW91c2VXaGVlbChldmVudCk6dm9pZFxuXHR7XG5cdFx0dGhpcy5fY2FtZXJhQ29udHJvbGxlci5kaXN0YW5jZSAtPSBldmVudC53aGVlbERlbHRhICogNTtcblxuXHRcdGlmICh0aGlzLl9jYW1lcmFDb250cm9sbGVyLmRpc3RhbmNlIDwgMTAwKVxuXHRcdFx0dGhpcy5fY2FtZXJhQ29udHJvbGxlci5kaXN0YW5jZSA9IDEwMDtcblx0XHRlbHNlIGlmICh0aGlzLl9jYW1lcmFDb250cm9sbGVyLmRpc3RhbmNlID4gMjAwMClcblx0XHRcdHRoaXMuX2NhbWVyYUNvbnRyb2xsZXIuZGlzdGFuY2UgPSAyMDAwO1xuXHR9XG5cblx0LyoqXG5cdCAqIHdpbmRvdyBsaXN0ZW5lciBmb3IgcmVzaXplIGV2ZW50c1xuXHQgKi9cblx0cHJpdmF0ZSBvblJlc2l6ZShldmVudCA9IG51bGwpOnZvaWRcblx0e1xuXHRcdHRoaXMuX3ZpZXcueSAgICAgICAgID0gMDtcblx0XHR0aGlzLl92aWV3LnggICAgICAgICA9IDA7XG5cdFx0dGhpcy5fdmlldy53aWR0aCAgICAgPSB3aW5kb3cuaW5uZXJXaWR0aDtcblx0XHR0aGlzLl92aWV3LmhlaWdodCAgICA9IHdpbmRvdy5pbm5lckhlaWdodDtcblx0fVxufVxuXG53aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKVxue1xuXHRuZXcgSW50ZXJtZWRpYXRlX0FXRFZpZXdlcigpO1xufVxuIl19