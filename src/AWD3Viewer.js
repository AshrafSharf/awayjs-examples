/*

AWD3 file loading example in AwayJS

Demonstrates:

How to use the Loader object to load an embedded internal awd model.

Code by Rob Bateman
rob@infiniteturtles.co.uk
http://www.infiniteturtles.co.uk

This code is distributed under the MIT License

Copyright (c) The Away Foundation http://www.theawayfoundation.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the “Software”), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
var AssetLibrary = require("awayjs-core/lib/library/AssetLibrary");
var AssetType = require("awayjs-core/lib/library/AssetType");
var AssetEvent = require("awayjs-core/lib/events/AssetEvent");
var URLRequest = require("awayjs-core/lib/net/URLRequest");
var LoaderEvent = require("awayjs-core/lib/events/LoaderEvent");
var OrthographicProjection = require("awayjs-core/lib/projections/OrthographicProjection");
var RequestAnimationFrame = require("awayjs-core/lib/utils/RequestAnimationFrame");
var View = require("awayjs-display/lib/containers/View");
var Loader = require("awayjs-display/lib/containers/Loader");
var RenderableNullSort = require("awayjs-display/lib/sort/RenderableNullSort");
var DefaultRenderer = require("awayjs-renderergl/lib/DefaultRenderer");
var MethodRendererPool = require("awayjs-methodmaterials/lib/pool/MethodRendererPool");
var AWDParser = require("awayjs-parsers/lib/AWDParser");
var Partition2D = require("awayjs-player/lib/fl/partition/Partition2D");
var AWD3Viewer = (function () {
    /**
     * Constructor
     */
    function AWD3Viewer() {
        this._time = 0;
        this.init();
    }
    /**
     * Global initialise function
     */
    AWD3Viewer.prototype.init = function () {
        this.initEngine();
        this.initObjects();
        this.initListeners();
    };
    /**
     * Initialise the engine
     */
    AWD3Viewer.prototype.initEngine = function () {
        //create the view
        this._view = new View(new DefaultRenderer(MethodRendererPool));
        this._view.renderer.renderableSorter = new RenderableNullSort();
        this._view.backgroundColor = 0xffffff;
        this._view.camera.projection = new OrthographicProjection(500);
        this._view.camera.projection.far = 500000;
        this._view.camera.projection.near = 0.1;
        this._view.camera.x = 0;
        this._view.camera.y = 0;
        this._view.camera.z = 300;
        this._view.camera.rotationX = -180;
        this._view.camera.rotationY = 0;
        this._view.camera.rotationZ = -180;
        //create custom lens
        // this._view.camera.projection = new OrthographicOffCenterProjection(0, 550, -400, 0);
        //  this._view.camera.projection.far = 500000;
        //  this._view.camera.projection.near = 0.1;
        /*
            //setup controller to be used on the camera
            this._cameraController = new HoverController(this._view.camera, null, 0, 0, 300, 10, 90);
            this._cameraController.lookAtPosition = new Vector3D(0, 50, 0);
            this._cameraController.tiltAngle = 0;
            this._cameraController.panAngle = 0;
            this._cameraController.minTiltAngle = 5;
            this._cameraController.maxTiltAngle = 60;
            this._cameraController.autoUpdate = false;
        */
    };
    /**
     * Initialise the scene objects
     */
    AWD3Viewer.prototype.initObjects = function () {
        var _this = this;
        AssetLibrary.enableParser(AWDParser);
        //kickoff asset loading
        var loader = new Loader();
        loader.addEventListener(AssetEvent.ASSET_COMPLETE, function (event) { return _this.onAssetComplete(event); });
        loader.addEventListener(LoaderEvent.RESOURCE_COMPLETE, function (event) { return _this.onRessourceComplete(event); });
        //loader.load(new URLRequest(document.getElementById("awdPath").innerHTML));
        loader.load(new URLRequest("assets/AWD3/ScareCrow.awd"));
        //loader.load(new URLRequest("assets/AWD3/NestedTween.awd"));
        //loader.load(new URLRequest("assets/AWD3/SimpleShape.awd"));
        //loader.load(new URLRequest("assets/AWD3/ComplexShape.awd"));
        //loader.load(new URLRequest("assets/AWD3/Simple_mask_test.awd"));
    };
    /**
     * Initialise the listeners
     */
    AWD3Viewer.prototype.initListeners = function () {
        var _this = this;
        window.onresize = function (event) { return _this.onResize(event); };
        document.onkeydown = function (event) { return _this.onKeyDown(event); };
        document.onmousedown = function (event) { return _this.onMouseDown(event); };
        document.onmouseup = function (event) { return _this.onMouseUp(event); };
        document.onmousemove = function (event) { return _this.onMouseMove(event); };
        document.onmousewheel = function (event) { return _this.onMouseWheel(event); };
        this.onResize();
        this._timer = new RequestAnimationFrame(this.onEnterFrame, this);
        this._timer.start();
    };
    /**
     * loader listener for asset complete events
     */
    AWD3Viewer.prototype.onAssetComplete = function (event) {
        if (event.asset.assetType == AssetType.TIMELINE) {
            this._rootTimeLine = event.asset;
            this._rootTimeLine.partition = new Partition2D(this._rootTimeLine);
        }
    };
    /**
     * loader listener for asset complete events
     */
    AWD3Viewer.prototype.onRessourceComplete = function (event) {
        if (this._rootTimeLine) {
            //console.log("LOADING A ROOT name = " + this._rootTimeLine.name + " duration=" + this._rootTimeLine.duration);
            this._view.scene.addChild(this._rootTimeLine);
        }
    };
    /**
     * Render loop
     */
    AWD3Viewer.prototype.onEnterFrame = function (dt) {
        this._time += dt;
        //update camera controler
        // this._cameraController.update();
        if (this._rootTimeLine != undefined) {
            //console.log("RENDER = ");
            this._rootTimeLine.update(dt);
        }
        //console.log("RENDER = ");
        //update view
        this._view.render();
    };
    AWD3Viewer.prototype.onKeyDown = function (event) {
        if (event.keyCode == 109) {
            var test = this._view.camera.projection;
            test.projectionHeight += 5;
        }
        else if (event.keyCode == 107) {
            var test = this._view.camera.projection;
            test.projectionHeight -= 5;
        }
    };
    AWD3Viewer.prototype.onMouseDown = function (event) {
        /*  this._lastPanAngle = this._cameraController.panAngle;
          this._lastTiltAngle = this._cameraController.tiltAngle;
          this._move = true;*/
        this._lastMouseX = event.clientX;
        this._lastMouseY = event.clientY;
        this._move = true;
    };
    AWD3Viewer.prototype.onMouseUp = function (event) {
        this._move = false;
    };
    AWD3Viewer.prototype.onMouseMove = function (event) {
        if (this._move) {
            if (event.clientX > (this._lastMouseX + 10))
                this._view.camera.x += 10;
            else if (event.clientX > this._lastMouseX)
                this._view.camera.x++;
            else if (event.clientX < (this._lastMouseX - 10))
                this._view.camera.x -= 10;
            else if (event.clientX < this._lastMouseX)
                this._view.camera.x--;
            if (event.clientY > (this._lastMouseY + 10))
                this._view.camera.y += 10;
            else if (event.clientY > this._lastMouseY)
                this._view.camera.y++;
            else if (event.clientY < (this._lastMouseY - 10))
                this._view.camera.y -= 10;
            else if (event.clientY < this._lastMouseY)
                this._view.camera.y--;
            this._lastMouseX = event.clientX;
            this._lastMouseY = event.clientY;
        }
    };
    AWD3Viewer.prototype.onMouseWheel = function (event) {
        /* this._cameraController.distance -= event.wheelDelta * 5;
     
         if (this._cameraController.distance < 100) {
           this._cameraController.distance = 100;
         } else if (this._cameraController.distance > 2000) {
           this._cameraController.distance = 2000;
         }
         */
    };
    AWD3Viewer.prototype.onResize = function (event) {
        if (event === void 0) { event = null; }
        this._view.y = 0;
        this._view.x = 0;
        this._view.width = window.innerWidth;
        this._view.height = window.innerHeight;
    };
    return AWD3Viewer;
})();
window.onload = function () {
    new AWD3Viewer();
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9BV0QzVmlld2VyLnRzIl0sIm5hbWVzIjpbIkFXRDNWaWV3ZXIiLCJBV0QzVmlld2VyLmNvbnN0cnVjdG9yIiwiQVdEM1ZpZXdlci5pbml0IiwiQVdEM1ZpZXdlci5pbml0RW5naW5lIiwiQVdEM1ZpZXdlci5pbml0T2JqZWN0cyIsIkFXRDNWaWV3ZXIuaW5pdExpc3RlbmVycyIsIkFXRDNWaWV3ZXIub25Bc3NldENvbXBsZXRlIiwiQVdEM1ZpZXdlci5vblJlc3NvdXJjZUNvbXBsZXRlIiwiQVdEM1ZpZXdlci5vbkVudGVyRnJhbWUiLCJBV0QzVmlld2VyLm9uS2V5RG93biIsIkFXRDNWaWV3ZXIub25Nb3VzZURvd24iLCJBV0QzVmlld2VyLm9uTW91c2VVcCIsIkFXRDNWaWV3ZXIub25Nb3VzZU1vdmUiLCJBV0QzVmlld2VyLm9uTW91c2VXaGVlbCIsIkFXRDNWaWV3ZXIub25SZXNpemUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBa0NFO0FBRUYsSUFBTyxZQUFZLFdBQWUsc0NBQXNDLENBQUMsQ0FBQztBQUMxRSxJQUFPLFNBQVMsV0FBZSxtQ0FBbUMsQ0FBQyxDQUFDO0FBQ3BFLElBQU8sVUFBVSxXQUFlLG1DQUFtQyxDQUFDLENBQUM7QUFDckUsSUFBTyxVQUFVLFdBQWUsZ0NBQWdDLENBQUMsQ0FBQztBQUNsRSxJQUFPLFdBQVcsV0FBZSxvQ0FBb0MsQ0FBQyxDQUFDO0FBR3ZFLElBQU8sc0JBQXNCLFdBQVksb0RBQW9ELENBQUMsQ0FBQztBQUUvRixJQUFPLHFCQUFxQixXQUFZLDZDQUE2QyxDQUFDLENBQUM7QUFFdkYsSUFBTyxJQUFJLFdBQWlCLG9DQUFvQyxDQUFDLENBQUM7QUFLbEUsSUFBTyxNQUFNLFdBQWdCLHNDQUFzQyxDQUFDLENBQUM7QUFFckUsSUFBTyxrQkFBa0IsV0FBYSw0Q0FBNEMsQ0FBQyxDQUFDO0FBR3BGLElBQU8sZUFBZSxXQUFjLHVDQUF1QyxDQUFDLENBQUM7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QVlBO1FBRTlCQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxHQUFXQSxDQUFDQSxDQUFDQTtRQUN6QkEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsR0FBV0EsQ0FBQ0EsQ0FBQ0E7UUFDekJBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLEtBQUtBLEdBQU9BLE1BQU1BLENBQUNBLFVBQVVBLENBQUNBO1FBQ3pDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxHQUFNQSxNQUFNQSxDQUFDQSxXQUFXQSxDQUFDQTtJQUN6Q0EsQ0FBQ0E7SUFFSGQsaUJBQUNBO0FBQURBLENBL05BLEFBK05DQSxJQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sR0FBRztJQUNmLElBQUksVUFBVSxFQUFFLENBQUM7QUFDbEIsQ0FBQyxDQUFDIiwiZmlsZSI6IkFXRDNWaWV3ZXIuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG5cclxuQVdEMyBmaWxlIGxvYWRpbmcgZXhhbXBsZSBpbiBBd2F5SlNcclxuXHJcbkRlbW9uc3RyYXRlczpcclxuXHJcbkhvdyB0byB1c2UgdGhlIExvYWRlciBvYmplY3QgdG8gbG9hZCBhbiBlbWJlZGRlZCBpbnRlcm5hbCBhd2QgbW9kZWwuXHJcblxyXG5Db2RlIGJ5IFJvYiBCYXRlbWFuXHJcbnJvYkBpbmZpbml0ZXR1cnRsZXMuY28udWtcclxuaHR0cDovL3d3dy5pbmZpbml0ZXR1cnRsZXMuY28udWtcclxuXHJcblRoaXMgY29kZSBpcyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcclxuXHJcbkNvcHlyaWdodCAoYykgVGhlIEF3YXkgRm91bmRhdGlvbiBodHRwOi8vd3d3LnRoZWF3YXlmb3VuZGF0aW9uLm9yZ1xyXG5cclxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxyXG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSDigJxTb2Z0d2FyZeKAnSksIHRvIGRlYWxcclxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xyXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXHJcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xyXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG5cclxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cclxuYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQg4oCcQVMgSVPigJ0sIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuVEhFIFNPRlRXQVJFLlxyXG5cclxuKi9cclxuXHJcbmltcG9ydCBBc3NldExpYnJhcnlcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2xpYnJhcnkvQXNzZXRMaWJyYXJ5XCIpO1xyXG5pbXBvcnQgQXNzZXRUeXBlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9saWJyYXJ5L0Fzc2V0VHlwZVwiKTtcclxuaW1wb3J0IEFzc2V0RXZlbnRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2V2ZW50cy9Bc3NldEV2ZW50XCIpO1xyXG5pbXBvcnQgVVJMUmVxdWVzdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvbmV0L1VSTFJlcXVlc3RcIik7XHJcbmltcG9ydCBMb2FkZXJFdmVudFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZXZlbnRzL0xvYWRlckV2ZW50XCIpO1xyXG5pbXBvcnQgVmVjdG9yM0RcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9WZWN0b3IzRFwiKTtcclxuaW1wb3J0IE9ydGhvZ3JhcGhpY09mZkNlbnRlclByb2plY3Rpb25cdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3Byb2plY3Rpb25zL09ydGhvZ3JhcGhpY09mZkNlbnRlclByb2plY3Rpb25cIik7XHJcbmltcG9ydCBPcnRob2dyYXBoaWNQcm9qZWN0aW9uXHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9wcm9qZWN0aW9ucy9PcnRob2dyYXBoaWNQcm9qZWN0aW9uXCIpO1xyXG5pbXBvcnQgS2V5Ym9hcmRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdWkvS2V5Ym9hcmRcIik7XHJcbmltcG9ydCBSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3V0aWxzL1JlcXVlc3RBbmltYXRpb25GcmFtZVwiKTtcclxuXHJcbmltcG9ydCBWaWV3XHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvY29udGFpbmVycy9WaWV3XCIpO1xyXG5pbXBvcnQgTWVzaFx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2VudGl0aWVzL01lc2hcIik7XHJcbmltcG9ydCBDb250YWluZXJcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2NvbnRhaW5lcnMvRGlzcGxheU9iamVjdENvbnRhaW5lclwiKTtcclxuaW1wb3J0IEdlb21ldHJ5XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvR2VvbWV0cnlcIik7XHJcbmltcG9ydCBIb3ZlckNvbnRyb2xsZXJcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9jb250cm9sbGVycy9Ib3ZlckNvbnRyb2xsZXJcIik7XHJcbmltcG9ydCBMb2FkZXJcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvY29udGFpbmVycy9Mb2FkZXJcIik7XHJcbmltcG9ydCBDb2xvck1hdGVyaWFsXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvbWF0ZXJpYWxzL0Jhc2ljTWF0ZXJpYWxcIik7XHJcbmltcG9ydCBSZW5kZXJhYmxlTnVsbFNvcnRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvc29ydC9SZW5kZXJhYmxlTnVsbFNvcnRcIik7XHJcbmltcG9ydCBQcmltaXRpdmVDdWJlUHJlZmFiXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL3ByZWZhYnMvUHJpbWl0aXZlQ3ViZVByZWZhYlwiKTtcclxuXHJcbmltcG9ydCBEZWZhdWx0UmVuZGVyZXJcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9EZWZhdWx0UmVuZGVyZXJcIik7XHJcblxyXG5pbXBvcnQgTWV0aG9kTWF0ZXJpYWxcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1tZXRob2RtYXRlcmlhbHMvbGliL01ldGhvZE1hdGVyaWFsXCIpO1xyXG5pbXBvcnQgTWV0aG9kUmVuZGVyZXJQb29sXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLW1ldGhvZG1hdGVyaWFscy9saWIvcG9vbC9NZXRob2RSZW5kZXJlclBvb2xcIik7XHJcblxyXG5pbXBvcnQgQVdEUGFyc2VyXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1wYXJzZXJzL2xpYi9BV0RQYXJzZXJcIik7XHJcbmltcG9ydCBQYXJ0aXRpb24yRFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcGxheWVyL2xpYi9mbC9wYXJ0aXRpb24vUGFydGl0aW9uMkRcIik7XHJcbmltcG9ydCBNb3ZpZUNsaXBcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXBsYXllci9saWIvZmwvZGlzcGxheS9Nb3ZpZUNsaXBcIik7XHJcblxyXG5jbGFzcyBBV0QzVmlld2VyXHJcbntcclxuICAvL2VuZ2luZSB2YXJpYWJsZXNcclxuICBwcml2YXRlIF92aWV3OiBWaWV3O1xyXG5cclxuICBwcml2YXRlIF9yb290VGltZUxpbmU6IE1vdmllQ2xpcDtcclxuXHJcbiAgcHJpdmF0ZSBfdGltZXI6IFJlcXVlc3RBbmltYXRpb25GcmFtZTtcclxuICBwcml2YXRlIF90aW1lOiBudW1iZXIgPSAwO1xyXG5cclxuICAvL25hdmlnYXRpb25cclxuICBwcml2YXRlIF9sYXN0TW91c2VYOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBfbGFzdE1vdXNlWTogbnVtYmVyO1xyXG4gIHByaXZhdGUgX21vdmU6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnN0cnVjdG9yXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoKVxyXG4gIHtcclxuXHR0aGlzLmluaXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdsb2JhbCBpbml0aWFsaXNlIGZ1bmN0aW9uXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpbml0KCk6IHZvaWRcclxuICB7XHJcblx0dGhpcy5pbml0RW5naW5lKCk7XHJcblx0dGhpcy5pbml0T2JqZWN0cygpO1xyXG5cdHRoaXMuaW5pdExpc3RlbmVycygpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGlzZSB0aGUgZW5naW5lXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpbml0RW5naW5lKCk6IHZvaWRcclxuICB7XHJcblx0Ly9jcmVhdGUgdGhlIHZpZXdcclxuXHR0aGlzLl92aWV3ID0gbmV3IFZpZXcobmV3IERlZmF1bHRSZW5kZXJlcihNZXRob2RSZW5kZXJlclBvb2wpKTtcclxuXHR0aGlzLl92aWV3LnJlbmRlcmVyLnJlbmRlcmFibGVTb3J0ZXIgPSBuZXcgUmVuZGVyYWJsZU51bGxTb3J0KCk7XHJcblx0dGhpcy5fdmlldy5iYWNrZ3JvdW5kQ29sb3IgPSAweGZmZmZmZjtcclxuXHJcblx0ICB0aGlzLl92aWV3LmNhbWVyYS5wcm9qZWN0aW9uID0gbmV3IE9ydGhvZ3JhcGhpY1Byb2plY3Rpb24oNTAwKTtcclxuXHQgIHRoaXMuX3ZpZXcuY2FtZXJhLnByb2plY3Rpb24uZmFyID0gNTAwMDAwO1xyXG5cdCAgdGhpcy5fdmlldy5jYW1lcmEucHJvamVjdGlvbi5uZWFyID0gMC4xO1xyXG5cdCAgdGhpcy5fdmlldy5jYW1lcmEueD0wO1xyXG5cdCAgdGhpcy5fdmlldy5jYW1lcmEueT0wO1xyXG5cdCAgdGhpcy5fdmlldy5jYW1lcmEuej0zMDA7XHJcblx0ICB0aGlzLl92aWV3LmNhbWVyYS5yb3RhdGlvblg9LTE4MDtcclxuXHQgIHRoaXMuX3ZpZXcuY2FtZXJhLnJvdGF0aW9uWT0wO1xyXG5cdCAgdGhpcy5fdmlldy5jYW1lcmEucm90YXRpb25aPS0xODA7XHJcblx0Ly9jcmVhdGUgY3VzdG9tIGxlbnNcclxuICAgLy8gdGhpcy5fdmlldy5jYW1lcmEucHJvamVjdGlvbiA9IG5ldyBPcnRob2dyYXBoaWNPZmZDZW50ZXJQcm9qZWN0aW9uKDAsIDU1MCwgLTQwMCwgMCk7XHJcbiAgLy8gIHRoaXMuX3ZpZXcuY2FtZXJhLnByb2plY3Rpb24uZmFyID0gNTAwMDAwO1xyXG4gIC8vICB0aGlzLl92aWV3LmNhbWVyYS5wcm9qZWN0aW9uLm5lYXIgPSAwLjE7XHJcblxyXG4vKlxyXG5cdC8vc2V0dXAgY29udHJvbGxlciB0byBiZSB1c2VkIG9uIHRoZSBjYW1lcmFcclxuXHR0aGlzLl9jYW1lcmFDb250cm9sbGVyID0gbmV3IEhvdmVyQ29udHJvbGxlcih0aGlzLl92aWV3LmNhbWVyYSwgbnVsbCwgMCwgMCwgMzAwLCAxMCwgOTApO1xyXG5cdHRoaXMuX2NhbWVyYUNvbnRyb2xsZXIubG9va0F0UG9zaXRpb24gPSBuZXcgVmVjdG9yM0QoMCwgNTAsIDApO1xyXG5cdHRoaXMuX2NhbWVyYUNvbnRyb2xsZXIudGlsdEFuZ2xlID0gMDtcclxuXHR0aGlzLl9jYW1lcmFDb250cm9sbGVyLnBhbkFuZ2xlID0gMDtcclxuXHR0aGlzLl9jYW1lcmFDb250cm9sbGVyLm1pblRpbHRBbmdsZSA9IDU7XHJcblx0dGhpcy5fY2FtZXJhQ29udHJvbGxlci5tYXhUaWx0QW5nbGUgPSA2MDtcclxuXHR0aGlzLl9jYW1lcmFDb250cm9sbGVyLmF1dG9VcGRhdGUgPSBmYWxzZTtcclxuKi9cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpc2UgdGhlIHNjZW5lIG9iamVjdHNcclxuICAgKi9cclxuICBwcml2YXRlIGluaXRPYmplY3RzKCk6IHZvaWRcclxuICB7XHJcblx0QXNzZXRMaWJyYXJ5LmVuYWJsZVBhcnNlcihBV0RQYXJzZXIpO1xyXG5cclxuXHQvL2tpY2tvZmYgYXNzZXQgbG9hZGluZ1xyXG5cdHZhciBsb2FkZXI6TG9hZGVyID0gbmV3IExvYWRlcigpO1xyXG5cdGxvYWRlci5hZGRFdmVudExpc3RlbmVyKEFzc2V0RXZlbnQuQVNTRVRfQ09NUExFVEUsIChldmVudDogQXNzZXRFdmVudCkgPT4gdGhpcy5vbkFzc2V0Q29tcGxldGUoZXZlbnQpKTtcclxuXHRsb2FkZXIuYWRkRXZlbnRMaXN0ZW5lcihMb2FkZXJFdmVudC5SRVNPVVJDRV9DT01QTEVURSwgKGV2ZW50OiBMb2FkZXJFdmVudCkgPT4gdGhpcy5vblJlc3NvdXJjZUNvbXBsZXRlKGV2ZW50KSk7XHJcblxyXG5cclxuXHQvL2xvYWRlci5sb2FkKG5ldyBVUkxSZXF1ZXN0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXdkUGF0aFwiKS5pbm5lckhUTUwpKTtcclxuXHRsb2FkZXIubG9hZChuZXcgVVJMUmVxdWVzdChcImFzc2V0cy9BV0QzL1NjYXJlQ3Jvdy5hd2RcIikpO1xyXG5cdC8vbG9hZGVyLmxvYWQobmV3IFVSTFJlcXVlc3QoXCJhc3NldHMvQVdEMy9OZXN0ZWRUd2Vlbi5hd2RcIikpO1xyXG5cdC8vbG9hZGVyLmxvYWQobmV3IFVSTFJlcXVlc3QoXCJhc3NldHMvQVdEMy9TaW1wbGVTaGFwZS5hd2RcIikpO1xyXG5cdC8vbG9hZGVyLmxvYWQobmV3IFVSTFJlcXVlc3QoXCJhc3NldHMvQVdEMy9Db21wbGV4U2hhcGUuYXdkXCIpKTtcclxuXHQvL2xvYWRlci5sb2FkKG5ldyBVUkxSZXF1ZXN0KFwiYXNzZXRzL0FXRDMvU2ltcGxlX21hc2tfdGVzdC5hd2RcIikpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGlzZSB0aGUgbGlzdGVuZXJzXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpbml0TGlzdGVuZXJzKCk6IHZvaWRcclxuICB7XHJcblx0d2luZG93Lm9ucmVzaXplICA9IChldmVudCkgPT4gdGhpcy5vblJlc2l6ZShldmVudCk7XHJcblxyXG5cdCAgZG9jdW1lbnQub25rZXlkb3duID0gKGV2ZW50KSA9PiB0aGlzLm9uS2V5RG93bihldmVudCk7XHJcblx0ZG9jdW1lbnQub25tb3VzZWRvd24gPSAoZXZlbnQpID0+IHRoaXMub25Nb3VzZURvd24oZXZlbnQpO1xyXG5cdGRvY3VtZW50Lm9ubW91c2V1cCA9IChldmVudCkgPT4gdGhpcy5vbk1vdXNlVXAoZXZlbnQpO1xyXG5cdGRvY3VtZW50Lm9ubW91c2Vtb3ZlID0gKGV2ZW50KSA9PiB0aGlzLm9uTW91c2VNb3ZlKGV2ZW50KTtcclxuXHRkb2N1bWVudC5vbm1vdXNld2hlZWwgPSAoZXZlbnQpID0+IHRoaXMub25Nb3VzZVdoZWVsKGV2ZW50KTtcclxuXHJcblx0dGhpcy5vblJlc2l6ZSgpO1xyXG5cclxuXHR0aGlzLl90aW1lciA9IG5ldyBSZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5vbkVudGVyRnJhbWUsIHRoaXMpO1xyXG5cdHRoaXMuX3RpbWVyLnN0YXJ0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBsb2FkZXIgbGlzdGVuZXIgZm9yIGFzc2V0IGNvbXBsZXRlIGV2ZW50c1xyXG4gICAqL1xyXG4gIHByaXZhdGUgb25Bc3NldENvbXBsZXRlKGV2ZW50OiBBc3NldEV2ZW50KTogdm9pZFxyXG4gIHtcclxuXHRpZihldmVudC5hc3NldC5hc3NldFR5cGUgPT0gQXNzZXRUeXBlLlRJTUVMSU5FKSB7XHJcblx0ICB0aGlzLl9yb290VGltZUxpbmUgPSA8TW92aWVDbGlwPiBldmVudC5hc3NldDtcclxuXHRcdHRoaXMuX3Jvb3RUaW1lTGluZS5wYXJ0aXRpb24gPSBuZXcgUGFydGl0aW9uMkQodGhpcy5fcm9vdFRpbWVMaW5lKTtcclxuXHR9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBsb2FkZXIgbGlzdGVuZXIgZm9yIGFzc2V0IGNvbXBsZXRlIGV2ZW50c1xyXG4gICAqL1xyXG4gIHByaXZhdGUgb25SZXNzb3VyY2VDb21wbGV0ZShldmVudDogTG9hZGVyRXZlbnQpOiB2b2lkIHtcclxuXHRpZiAodGhpcy5fcm9vdFRpbWVMaW5lKSB7XHJcblx0ICAvL2NvbnNvbGUubG9nKFwiTE9BRElORyBBIFJPT1QgbmFtZSA9IFwiICsgdGhpcy5fcm9vdFRpbWVMaW5lLm5hbWUgKyBcIiBkdXJhdGlvbj1cIiArIHRoaXMuX3Jvb3RUaW1lTGluZS5kdXJhdGlvbik7XHJcblx0ICB0aGlzLl92aWV3LnNjZW5lLmFkZENoaWxkKHRoaXMuX3Jvb3RUaW1lTGluZSk7XHJcblx0ICAvLyBhdXRvcGxheSBsaWtlIGluIEZsYXNoXHJcblx0ICAvL3RoaXMuX3Jvb3RUaW1lTGluZS5wbGF5KCk7XHJcblx0fVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVuZGVyIGxvb3BcclxuICAgKi9cclxuICBwcml2YXRlIG9uRW50ZXJGcmFtZShkdDogbnVtYmVyKTogdm9pZCB7XHJcblx0dGhpcy5fdGltZSArPSBkdDtcclxuXHJcblx0Ly91cGRhdGUgY2FtZXJhIGNvbnRyb2xlclxyXG4gICAvLyB0aGlzLl9jYW1lcmFDb250cm9sbGVyLnVwZGF0ZSgpO1xyXG5cclxuXHRpZiAodGhpcy5fcm9vdFRpbWVMaW5lICE9IHVuZGVmaW5lZCkge1xyXG5cdCAgLy9jb25zb2xlLmxvZyhcIlJFTkRFUiA9IFwiKTtcclxuXHQgIHRoaXMuX3Jvb3RUaW1lTGluZS51cGRhdGUoZHQpO1xyXG5cdH1cclxuXHQvL2NvbnNvbGUubG9nKFwiUkVOREVSID0gXCIpO1xyXG5cdC8vdXBkYXRlIHZpZXdcclxuXHR0aGlzLl92aWV3LnJlbmRlcigpO1xyXG4gIH1cclxuXHJcblx0cHJpdmF0ZSBvbktleURvd24oZXZlbnQpOiB2b2lkIHtcclxuXHRcdGlmKGV2ZW50LmtleUNvZGU9PTEwOSl7XHJcblx0XHRcdHZhciB0ZXN0Ok9ydGhvZ3JhcGhpY1Byb2plY3Rpb24gPSA8T3J0aG9ncmFwaGljUHJvamVjdGlvbj4gdGhpcy5fdmlldy5jYW1lcmEucHJvamVjdGlvbjtcclxuXHRcdFx0dGVzdC5wcm9qZWN0aW9uSGVpZ2h0Kz01O1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZihldmVudC5rZXlDb2RlPT0xMDcpe1xyXG5cdFx0XHR2YXIgdGVzdDpPcnRob2dyYXBoaWNQcm9qZWN0aW9uID0gPE9ydGhvZ3JhcGhpY1Byb2plY3Rpb24+IHRoaXMuX3ZpZXcuY2FtZXJhLnByb2plY3Rpb247XHJcblx0XHRcdHRlc3QucHJvamVjdGlvbkhlaWdodC09NTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG4gIHByaXZhdGUgb25Nb3VzZURvd24oZXZlbnQpOiB2b2lkXHJcbiAge1xyXG4gIC8qICB0aGlzLl9sYXN0UGFuQW5nbGUgPSB0aGlzLl9jYW1lcmFDb250cm9sbGVyLnBhbkFuZ2xlO1xyXG5cdHRoaXMuX2xhc3RUaWx0QW5nbGUgPSB0aGlzLl9jYW1lcmFDb250cm9sbGVyLnRpbHRBbmdsZTtcclxuXHR0aGlzLl9tb3ZlID0gdHJ1ZTsqL1xyXG5cdHRoaXMuX2xhc3RNb3VzZVggPSBldmVudC5jbGllbnRYO1xyXG5cdHRoaXMuX2xhc3RNb3VzZVkgPSBldmVudC5jbGllbnRZO1xyXG5cdHRoaXMuX21vdmUgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBvbk1vdXNlVXAoZXZlbnQpOiB2b2lkXHJcbiAge1xyXG5cdHRoaXMuX21vdmUgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgb25Nb3VzZU1vdmUoZXZlbnQpXHJcbiAge1xyXG5cdGlmICh0aGlzLl9tb3ZlKSB7XHJcblx0XHRpZiAoIGV2ZW50LmNsaWVudFg+KHRoaXMuX2xhc3RNb3VzZVgrMTApKVxyXG5cdFx0XHR0aGlzLl92aWV3LmNhbWVyYS54Kz0xMDtcclxuXHRcdGVsc2UgaWYgKCBldmVudC5jbGllbnRYPnRoaXMuX2xhc3RNb3VzZVgpXHJcblx0XHRcdHRoaXMuX3ZpZXcuY2FtZXJhLngrKztcclxuXHRcdGVsc2UgaWYgKCBldmVudC5jbGllbnRYPCh0aGlzLl9sYXN0TW91c2VYLTEwKSlcclxuXHRcdFx0dGhpcy5fdmlldy5jYW1lcmEueC09MTA7XHJcblx0XHRlbHNlIGlmICggZXZlbnQuY2xpZW50WDx0aGlzLl9sYXN0TW91c2VYKVxyXG5cdFx0XHR0aGlzLl92aWV3LmNhbWVyYS54LS07XHJcblx0XHRpZiAoIGV2ZW50LmNsaWVudFk+KHRoaXMuX2xhc3RNb3VzZVkrMTApKVxyXG5cdFx0XHR0aGlzLl92aWV3LmNhbWVyYS55Kz0xMDtcclxuXHRcdGVsc2UgaWYgKCBldmVudC5jbGllbnRZPnRoaXMuX2xhc3RNb3VzZVkpXHJcblx0XHRcdHRoaXMuX3ZpZXcuY2FtZXJhLnkrKztcclxuXHRcdGVsc2UgaWYgKCBldmVudC5jbGllbnRZPCh0aGlzLl9sYXN0TW91c2VZLTEwKSlcclxuXHRcdFx0dGhpcy5fdmlldy5jYW1lcmEueS09MTA7XHJcblx0XHRlbHNlIGlmICggZXZlbnQuY2xpZW50WTx0aGlzLl9sYXN0TW91c2VZKVxyXG5cdFx0XHR0aGlzLl92aWV3LmNhbWVyYS55LS07XHJcblx0XHR0aGlzLl9sYXN0TW91c2VYID0gZXZlbnQuY2xpZW50WDtcclxuXHRcdHRoaXMuX2xhc3RNb3VzZVkgPSBldmVudC5jbGllbnRZO1xyXG5cdCAgLy90aGlzLl9jYW1lcmFDb250cm9sbGVyLnBhbkFuZ2xlID0gMC4zKihldmVudC5jbGllbnRYIC0gdGhpcy5fbGFzdE1vdXNlWCkgKyB0aGlzLl9sYXN0UGFuQW5nbGU7XHJcblx0ICAvL3RoaXMuX2NhbWVyYUNvbnRyb2xsZXIudGlsdEFuZ2xlID0gMC4zKihldmVudC5jbGllbnRZIC0gdGhpcy5fbGFzdE1vdXNlWSkgKyB0aGlzLl9sYXN0VGlsdEFuZ2xlO1xyXG5cdH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgb25Nb3VzZVdoZWVsKGV2ZW50KTogdm9pZFxyXG4gIHtcclxuXHJcbiAgIC8qIHRoaXMuX2NhbWVyYUNvbnRyb2xsZXIuZGlzdGFuY2UgLT0gZXZlbnQud2hlZWxEZWx0YSAqIDU7XHJcblxyXG5cdGlmICh0aGlzLl9jYW1lcmFDb250cm9sbGVyLmRpc3RhbmNlIDwgMTAwKSB7XHJcblx0ICB0aGlzLl9jYW1lcmFDb250cm9sbGVyLmRpc3RhbmNlID0gMTAwO1xyXG5cdH0gZWxzZSBpZiAodGhpcy5fY2FtZXJhQ29udHJvbGxlci5kaXN0YW5jZSA+IDIwMDApIHtcclxuXHQgIHRoaXMuX2NhbWVyYUNvbnRyb2xsZXIuZGlzdGFuY2UgPSAyMDAwO1xyXG5cdH1cclxuXHQqL1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBvblJlc2l6ZShldmVudCA9IG51bGwpOiB2b2lkXHJcbiAge1xyXG5cdHRoaXMuX3ZpZXcueSAgICAgICAgID0gMDtcclxuXHR0aGlzLl92aWV3LnggICAgICAgICA9IDA7XHJcblx0dGhpcy5fdmlldy53aWR0aCAgICAgPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuXHR0aGlzLl92aWV3LmhlaWdodCAgICA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICB9XHJcblxyXG59XHJcblxyXG53aW5kb3cub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG5cdG5ldyBBV0QzVmlld2VyKCk7XHJcbn07XHJcbiJdfQ==