var LoaderEvent = require("awayjs-core/lib/events/LoaderEvent");
var Vector3D = require("awayjs-core/lib/geom/Vector3D");
var AssetLibrary = require("awayjs-core/lib/library/AssetLibrary");
var AssetType = require("awayjs-core/lib/library/AssetType");
var URLRequest = require("awayjs-core/lib/net/URLRequest");
var RequestAnimationFrame = require("awayjs-core/lib/utils/RequestAnimationFrame");
var View = require("awayjs-display/lib/containers/View");
var DirectionalLight = require("awayjs-display/lib/entities/DirectionalLight");
var MouseEvent = require("awayjs-display/lib/events/MouseEvent");
var StaticLightPicker = require("awayjs-display/lib/materials/lightpickers/StaticLightPicker");
var DefaultRenderer = require("awayjs-renderergl/lib/DefaultRenderer");
var JSPickingCollider = require("awayjs-renderergl/lib/pick/JSPickingCollider");
var MethodMaterial = require("awayjs-methodmaterials/lib/MethodMaterial");
var MethodRendererPool = require("awayjs-methodmaterials/lib/pool/MethodRendererPool");
var AWDParser = require("awayjs-parsers/lib/AWDParser");
var AWDSuzanne = (function () {
    function AWDSuzanne() {
        var _this = this;
        this._lookAtPosition = new Vector3D();
        this._cameraIncrement = 0;
        this._mouseOverMaterial = new MethodMaterial(0xFF0000);
        this.initView();
        this.loadAssets();
        this.initLights();
        window.onresize = function (event) { return _this.onResize(event); };
        this.onResize();
    }
    /**
     *
     */
    AWDSuzanne.prototype.initView = function () {
        this._renderer = new DefaultRenderer(MethodRendererPool);
        this._view = new View(this._renderer);
        this._view.camera.projection.far = 6000;
        this._view.forceMouseMove = true;
    };
    /**
     *
     */
    AWDSuzanne.prototype.loadAssets = function () {
        var _this = this;
        this._timer = new RequestAnimationFrame(this.render, this);
        this._timer.start();
        AssetLibrary.enableParser(AWDParser);
        this._token = AssetLibrary.load(new URLRequest('assets/suzanne.awd'));
        this._token.addEventListener(LoaderEvent.RESOURCE_COMPLETE, function (event) { return _this.onResourceComplete(event); });
    };
    /**
     *
     */
    AWDSuzanne.prototype.initLights = function () {
        this._light = new DirectionalLight();
        this._light.color = 0x683019;
        this._light.direction = new Vector3D(1, 0, 0);
        this._light.ambient = 0.1;
        this._light.ambientColor = 0x85b2cd;
        this._light.diffuse = 2.8;
        this._light.specular = 1.8;
        this._view.scene.addChild(this._light);
        this._lightPicker = new StaticLightPicker([this._light]);
    };
    /**
     *
     */
    AWDSuzanne.prototype.onResize = function (event) {
        if (event === void 0) { event = null; }
        this._view.y = 0;
        this._view.x = 0;
        this._view.width = window.innerWidth;
        this._view.height = window.innerHeight;
    };
    /**
     *
     * @param dt
     */
    AWDSuzanne.prototype.render = function (dt) {
        if (this._view.camera) {
            this._view.camera.lookAt(this._lookAtPosition);
            this._cameraIncrement += 0.01;
            this._view.camera.x = Math.cos(this._cameraIncrement) * 1400;
            this._view.camera.z = Math.sin(this._cameraIncrement) * 1400;
            this._light.x = Math.cos(this._cameraIncrement) * 1400;
            this._light.y = Math.sin(this._cameraIncrement) * 1400;
        }
        this._view.render();
    };
    /**
     *
     * @param e
     */
    AWDSuzanne.prototype.onResourceComplete = function (e) {
        var _this = this;
        var loader = e.target;
        var numAssets = loader.baseDependency.assets.length;
        for (var i = 0; i < numAssets; ++i) {
            var asset = loader.baseDependency.assets[i];
            switch (asset.assetType) {
                case AssetType.MESH:
                    var mesh = asset;
                    this._suzane = mesh;
                    this._suzane.material.lightPicker = this._lightPicker;
                    this._suzane.y = -100;
                    this._mouseOutMaterial = this._suzane.material;
                    for (var c = 0; c < 80; c++) {
                        var clone = mesh.clone();
                        var scale = this.getRandom(50, 200);
                        clone.x = this.getRandom(-2000, 2000);
                        clone.y = this.getRandom(-2000, 2000);
                        clone.z = this.getRandom(-2000, 2000);
                        clone.transform.scale = new Vector3D(scale, scale, scale);
                        clone.rotationY = this.getRandom(0, 360);
                        clone.addEventListener(MouseEvent.MOUSE_OVER, function (event) { return _this.onMouseOver(event); });
                        clone.addEventListener(MouseEvent.MOUSE_OUT, function (event) { return _this.onMouseOut(event); });
                        this._view.scene.addChild(clone);
                    }
                    mesh.transform.scale = new Vector3D(500, 500, 500);
                    mesh.pickingCollider = new JSPickingCollider(this._renderer.stage);
                    mesh.addEventListener(MouseEvent.MOUSE_OVER, function (event) { return _this.onMouseOver(event); });
                    mesh.addEventListener(MouseEvent.MOUSE_OUT, function (event) { return _this.onMouseOut(event); });
                    this._view.scene.addChild(mesh);
                    break;
                case AssetType.GEOMETRY:
                    break;
                case AssetType.MATERIAL:
                    break;
            }
        }
    };
    AWDSuzanne.prototype.onMouseOver = function (event) {
        event.object.material = this._mouseOverMaterial;
        console.log("mouseover");
    };
    AWDSuzanne.prototype.onMouseOut = function (event) {
        event.object.material = this._mouseOutMaterial;
        console.log("mouseout");
    };
    /**
     *
     * @param min
     * @param max
     * @returns {number}
     */
    AWDSuzanne.prototype.getRandom = function (min, max) {
        return Math.random() * (max - min) + min;
    };
    return AWDSuzanne;
})();
window.onload = function () {
    new AWDSuzanne();
};

//# sourceMappingURL=data:application/json;base64,